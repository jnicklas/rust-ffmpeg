#![crate_name = "avutil52"]
#![crate_type = "dylib"]
#![allow(non_camel_case_types)]
/* automatically generated by rust-bindgen */
extern crate libc;
use libc::{size_t,uint8_t,int64_t,uint64_t,FILE,int8_t,uint32_t};

pub type Enum_AVMediaType = ::libc::c_int;
pub const AVMEDIA_TYPE_UNKNOWN: ::libc::c_int = -1;
pub const AVMEDIA_TYPE_VIDEO: ::libc::c_int = 0;
pub const AVMEDIA_TYPE_AUDIO: ::libc::c_int = 1;
pub const AVMEDIA_TYPE_DATA: ::libc::c_int = 2;
pub const AVMEDIA_TYPE_SUBTITLE: ::libc::c_int = 3;
pub const AVMEDIA_TYPE_ATTACHMENT: ::libc::c_int = 4;
pub const AVMEDIA_TYPE_NB: ::libc::c_int = 5;
pub type Enum_AVPictureType = ::libc::c_uint;
pub const AV_PICTURE_TYPE_NONE: ::libc::c_uint = 0;
pub const AV_PICTURE_TYPE_I: ::libc::c_uint = 1;
pub const AV_PICTURE_TYPE_P: ::libc::c_uint = 2;
pub const AV_PICTURE_TYPE_B: ::libc::c_uint = 3;
pub const AV_PICTURE_TYPE_S: ::libc::c_uint = 4;
pub const AV_PICTURE_TYPE_SI: ::libc::c_uint = 5;
pub const AV_PICTURE_TYPE_SP: ::libc::c_uint = 6;
pub const AV_PICTURE_TYPE_BI: ::libc::c_uint = 7;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AVRational {
    pub num: ::libc::c_int,
    pub den: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_AVRational {
    fn clone(&self) -> Struct_AVRational { *self }
}
impl ::std::default::Default for Struct_AVRational {
    fn default() -> Struct_AVRational { unsafe { ::std::mem::zeroed() } }
}
pub type AVRational = Struct_AVRational;
pub type Enum_AVRounding = ::libc::c_uint;
pub const AV_ROUND_ZERO: ::libc::c_uint = 0;
pub const AV_ROUND_INF: ::libc::c_uint = 1;
pub const AV_ROUND_DOWN: ::libc::c_uint = 2;
pub const AV_ROUND_UP: ::libc::c_uint = 3;
pub const AV_ROUND_NEAR_INF: ::libc::c_uint = 5;
pub const AV_ROUND_PASS_MINMAX: ::libc::c_uint = 8192;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type Enum_Unnamed1 = ::libc::c_uint;
pub const AV_CLASS_CATEGORY_NA: ::libc::c_uint = 0;
pub const AV_CLASS_CATEGORY_INPUT: ::libc::c_uint = 1;
pub const AV_CLASS_CATEGORY_OUTPUT: ::libc::c_uint = 2;
pub const AV_CLASS_CATEGORY_MUXER: ::libc::c_uint = 3;
pub const AV_CLASS_CATEGORY_DEMUXER: ::libc::c_uint = 4;
pub const AV_CLASS_CATEGORY_ENCODER: ::libc::c_uint = 5;
pub const AV_CLASS_CATEGORY_DECODER: ::libc::c_uint = 6;
pub const AV_CLASS_CATEGORY_FILTER: ::libc::c_uint = 7;
pub const AV_CLASS_CATEGORY_BITSTREAM_FILTER: ::libc::c_uint = 8;
pub const AV_CLASS_CATEGORY_SWSCALER: ::libc::c_uint = 9;
pub const AV_CLASS_CATEGORY_SWRESAMPLER: ::libc::c_uint = 10;
pub const AV_CLASS_CATEGORY_NB: ::libc::c_uint = 11;
pub type AVClassCategory = Enum_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AVClass {
    pub class_name: *const ::libc::c_char,
    pub item_name: ::std::option::Option<extern "C" fn(ctx:
                                                           *mut ::libc::c_void)
                                             -> *const ::libc::c_char>,
    pub option: *const Struct_AVOption,
    pub version: ::libc::c_int,
    pub log_level_offset_offset: ::libc::c_int,
    pub parent_log_context_offset: ::libc::c_int,
    pub child_next: ::std::option::Option<extern "C" fn(obj:
                                                            *mut ::libc::c_void,
                                                        prev:
                                                            *mut ::libc::c_void)
                                              -> *mut ::libc::c_void>,
    pub child_class_next: ::std::option::Option<extern "C" fn(prev:
                                                                  *const Struct_AVClass)
                                                    -> *const Struct_AVClass>,
    pub category: AVClassCategory,
    pub get_category: ::std::option::Option<extern "C" fn(ctx:
                                                              *mut ::libc::c_void)
                                                -> AVClassCategory>,
    pub query_ranges: ::std::option::Option<extern "C" fn(arg1:
                                                              *mut *mut Struct_AVOptionRanges,
                                                          obj:
                                                              *mut ::libc::c_void,
                                                          key:
                                                              *const ::libc::c_char,
                                                          flags:
                                                              ::libc::c_int)
                                                -> ::libc::c_int>,
}
impl ::std::clone::Clone for Struct_AVClass {
    fn clone(&self) -> Struct_AVClass { *self }
}
impl ::std::default::Default for Struct_AVClass {
    fn default() -> Struct_AVClass { unsafe { ::std::mem::zeroed() } }
}
pub type AVClass = Struct_AVClass;
pub type Enum_AVPixelFormat = ::libc::c_int;
pub const AV_PIX_FMT_NONE: ::libc::c_int = -1;
pub const AV_PIX_FMT_YUV420P: ::libc::c_int = 0;
pub const AV_PIX_FMT_YUYV422: ::libc::c_int = 1;
pub const AV_PIX_FMT_RGB24: ::libc::c_int = 2;
pub const AV_PIX_FMT_BGR24: ::libc::c_int = 3;
pub const AV_PIX_FMT_YUV422P: ::libc::c_int = 4;
pub const AV_PIX_FMT_YUV444P: ::libc::c_int = 5;
pub const AV_PIX_FMT_YUV410P: ::libc::c_int = 6;
pub const AV_PIX_FMT_YUV411P: ::libc::c_int = 7;
pub const AV_PIX_FMT_GRAY8: ::libc::c_int = 8;
pub const AV_PIX_FMT_MONOWHITE: ::libc::c_int = 9;
pub const AV_PIX_FMT_MONOBLACK: ::libc::c_int = 10;
pub const AV_PIX_FMT_PAL8: ::libc::c_int = 11;
pub const AV_PIX_FMT_YUVJ420P: ::libc::c_int = 12;
pub const AV_PIX_FMT_YUVJ422P: ::libc::c_int = 13;
pub const AV_PIX_FMT_YUVJ444P: ::libc::c_int = 14;
pub const AV_PIX_FMT_XVMC_MPEG2_MC: ::libc::c_int = 15;
pub const AV_PIX_FMT_XVMC_MPEG2_IDCT: ::libc::c_int = 16;
pub const AV_PIX_FMT_UYVY422: ::libc::c_int = 17;
pub const AV_PIX_FMT_UYYVYY411: ::libc::c_int = 18;
pub const AV_PIX_FMT_BGR8: ::libc::c_int = 19;
pub const AV_PIX_FMT_BGR4: ::libc::c_int = 20;
pub const AV_PIX_FMT_BGR4_BYTE: ::libc::c_int = 21;
pub const AV_PIX_FMT_RGB8: ::libc::c_int = 22;
pub const AV_PIX_FMT_RGB4: ::libc::c_int = 23;
pub const AV_PIX_FMT_RGB4_BYTE: ::libc::c_int = 24;
pub const AV_PIX_FMT_NV12: ::libc::c_int = 25;
pub const AV_PIX_FMT_NV21: ::libc::c_int = 26;
pub const AV_PIX_FMT_ARGB: ::libc::c_int = 27;
pub const AV_PIX_FMT_RGBA: ::libc::c_int = 28;
pub const AV_PIX_FMT_ABGR: ::libc::c_int = 29;
pub const AV_PIX_FMT_BGRA: ::libc::c_int = 30;
pub const AV_PIX_FMT_GRAY16BE: ::libc::c_int = 31;
pub const AV_PIX_FMT_GRAY16LE: ::libc::c_int = 32;
pub const AV_PIX_FMT_YUV440P: ::libc::c_int = 33;
pub const AV_PIX_FMT_YUVJ440P: ::libc::c_int = 34;
pub const AV_PIX_FMT_YUVA420P: ::libc::c_int = 35;
pub const AV_PIX_FMT_VDPAU_H264: ::libc::c_int = 36;
pub const AV_PIX_FMT_VDPAU_MPEG1: ::libc::c_int = 37;
pub const AV_PIX_FMT_VDPAU_MPEG2: ::libc::c_int = 38;
pub const AV_PIX_FMT_VDPAU_WMV3: ::libc::c_int = 39;
pub const AV_PIX_FMT_VDPAU_VC1: ::libc::c_int = 40;
pub const AV_PIX_FMT_RGB48BE: ::libc::c_int = 41;
pub const AV_PIX_FMT_RGB48LE: ::libc::c_int = 42;
pub const AV_PIX_FMT_RGB565BE: ::libc::c_int = 43;
pub const AV_PIX_FMT_RGB565LE: ::libc::c_int = 44;
pub const AV_PIX_FMT_RGB555BE: ::libc::c_int = 45;
pub const AV_PIX_FMT_RGB555LE: ::libc::c_int = 46;
pub const AV_PIX_FMT_BGR565BE: ::libc::c_int = 47;
pub const AV_PIX_FMT_BGR565LE: ::libc::c_int = 48;
pub const AV_PIX_FMT_BGR555BE: ::libc::c_int = 49;
pub const AV_PIX_FMT_BGR555LE: ::libc::c_int = 50;
pub const AV_PIX_FMT_VAAPI_MOCO: ::libc::c_int = 51;
pub const AV_PIX_FMT_VAAPI_IDCT: ::libc::c_int = 52;
pub const AV_PIX_FMT_VAAPI_VLD: ::libc::c_int = 53;
pub const AV_PIX_FMT_YUV420P16LE: ::libc::c_int = 54;
pub const AV_PIX_FMT_YUV420P16BE: ::libc::c_int = 55;
pub const AV_PIX_FMT_YUV422P16LE: ::libc::c_int = 56;
pub const AV_PIX_FMT_YUV422P16BE: ::libc::c_int = 57;
pub const AV_PIX_FMT_YUV444P16LE: ::libc::c_int = 58;
pub const AV_PIX_FMT_YUV444P16BE: ::libc::c_int = 59;
pub const AV_PIX_FMT_VDPAU_MPEG4: ::libc::c_int = 60;
pub const AV_PIX_FMT_DXVA2_VLD: ::libc::c_int = 61;
pub const AV_PIX_FMT_RGB444LE: ::libc::c_int = 62;
pub const AV_PIX_FMT_RGB444BE: ::libc::c_int = 63;
pub const AV_PIX_FMT_BGR444LE: ::libc::c_int = 64;
pub const AV_PIX_FMT_BGR444BE: ::libc::c_int = 65;
pub const AV_PIX_FMT_GRAY8A: ::libc::c_int = 66;
pub const AV_PIX_FMT_BGR48BE: ::libc::c_int = 67;
pub const AV_PIX_FMT_BGR48LE: ::libc::c_int = 68;
pub const AV_PIX_FMT_YUV420P9BE: ::libc::c_int = 69;
pub const AV_PIX_FMT_YUV420P9LE: ::libc::c_int = 70;
pub const AV_PIX_FMT_YUV420P10BE: ::libc::c_int = 71;
pub const AV_PIX_FMT_YUV420P10LE: ::libc::c_int = 72;
pub const AV_PIX_FMT_YUV422P10BE: ::libc::c_int = 73;
pub const AV_PIX_FMT_YUV422P10LE: ::libc::c_int = 74;
pub const AV_PIX_FMT_YUV444P9BE: ::libc::c_int = 75;
pub const AV_PIX_FMT_YUV444P9LE: ::libc::c_int = 76;
pub const AV_PIX_FMT_YUV444P10BE: ::libc::c_int = 77;
pub const AV_PIX_FMT_YUV444P10LE: ::libc::c_int = 78;
pub const AV_PIX_FMT_YUV422P9BE: ::libc::c_int = 79;
pub const AV_PIX_FMT_YUV422P9LE: ::libc::c_int = 80;
pub const AV_PIX_FMT_VDA_VLD: ::libc::c_int = 81;
pub const AV_PIX_FMT_GBRP: ::libc::c_int = 82;
pub const AV_PIX_FMT_GBRP9BE: ::libc::c_int = 83;
pub const AV_PIX_FMT_GBRP9LE: ::libc::c_int = 84;
pub const AV_PIX_FMT_GBRP10BE: ::libc::c_int = 85;
pub const AV_PIX_FMT_GBRP10LE: ::libc::c_int = 86;
pub const AV_PIX_FMT_GBRP16BE: ::libc::c_int = 87;
pub const AV_PIX_FMT_GBRP16LE: ::libc::c_int = 88;
pub const AV_PIX_FMT_YUVA422P_LIBAV: ::libc::c_int = 89;
pub const AV_PIX_FMT_YUVA444P_LIBAV: ::libc::c_int = 90;
pub const AV_PIX_FMT_YUVA420P9BE: ::libc::c_int = 91;
pub const AV_PIX_FMT_YUVA420P9LE: ::libc::c_int = 92;
pub const AV_PIX_FMT_YUVA422P9BE: ::libc::c_int = 93;
pub const AV_PIX_FMT_YUVA422P9LE: ::libc::c_int = 94;
pub const AV_PIX_FMT_YUVA444P9BE: ::libc::c_int = 95;
pub const AV_PIX_FMT_YUVA444P9LE: ::libc::c_int = 96;
pub const AV_PIX_FMT_YUVA420P10BE: ::libc::c_int = 97;
pub const AV_PIX_FMT_YUVA420P10LE: ::libc::c_int = 98;
pub const AV_PIX_FMT_YUVA422P10BE: ::libc::c_int = 99;
pub const AV_PIX_FMT_YUVA422P10LE: ::libc::c_int = 100;
pub const AV_PIX_FMT_YUVA444P10BE: ::libc::c_int = 101;
pub const AV_PIX_FMT_YUVA444P10LE: ::libc::c_int = 102;
pub const AV_PIX_FMT_YUVA420P16BE: ::libc::c_int = 103;
pub const AV_PIX_FMT_YUVA420P16LE: ::libc::c_int = 104;
pub const AV_PIX_FMT_YUVA422P16BE: ::libc::c_int = 105;
pub const AV_PIX_FMT_YUVA422P16LE: ::libc::c_int = 106;
pub const AV_PIX_FMT_YUVA444P16BE: ::libc::c_int = 107;
pub const AV_PIX_FMT_YUVA444P16LE: ::libc::c_int = 108;
pub const AV_PIX_FMT_VDPAU: ::libc::c_int = 109;
pub const AV_PIX_FMT_XYZ12LE: ::libc::c_int = 110;
pub const AV_PIX_FMT_XYZ12BE: ::libc::c_int = 111;
pub const AV_PIX_FMT_NV16: ::libc::c_int = 112;
pub const AV_PIX_FMT_NV20LE: ::libc::c_int = 113;
pub const AV_PIX_FMT_NV20BE: ::libc::c_int = 114;
pub const AV_PIX_FMT_RGBA64BE: ::libc::c_int = 291;
pub const AV_PIX_FMT_RGBA64LE: ::libc::c_int = 292;
pub const AV_PIX_FMT_BGRA64BE: ::libc::c_int = 293;
pub const AV_PIX_FMT_BGRA64LE: ::libc::c_int = 294;
pub const AV_PIX_FMT_0RGB: ::libc::c_int = 295;
pub const AV_PIX_FMT_RGB0: ::libc::c_int = 296;
pub const AV_PIX_FMT_0BGR: ::libc::c_int = 297;
pub const AV_PIX_FMT_BGR0: ::libc::c_int = 298;
pub const AV_PIX_FMT_YUVA444P: ::libc::c_int = 299;
pub const AV_PIX_FMT_YUVA422P: ::libc::c_int = 300;
pub const AV_PIX_FMT_YUV420P12BE: ::libc::c_int = 301;
pub const AV_PIX_FMT_YUV420P12LE: ::libc::c_int = 302;
pub const AV_PIX_FMT_YUV420P14BE: ::libc::c_int = 303;
pub const AV_PIX_FMT_YUV420P14LE: ::libc::c_int = 304;
pub const AV_PIX_FMT_YUV422P12BE: ::libc::c_int = 305;
pub const AV_PIX_FMT_YUV422P12LE: ::libc::c_int = 306;
pub const AV_PIX_FMT_YUV422P14BE: ::libc::c_int = 307;
pub const AV_PIX_FMT_YUV422P14LE: ::libc::c_int = 308;
pub const AV_PIX_FMT_YUV444P12BE: ::libc::c_int = 309;
pub const AV_PIX_FMT_YUV444P12LE: ::libc::c_int = 310;
pub const AV_PIX_FMT_YUV444P14BE: ::libc::c_int = 311;
pub const AV_PIX_FMT_YUV444P14LE: ::libc::c_int = 312;
pub const AV_PIX_FMT_GBRP12BE: ::libc::c_int = 313;
pub const AV_PIX_FMT_GBRP12LE: ::libc::c_int = 314;
pub const AV_PIX_FMT_GBRP14BE: ::libc::c_int = 315;
pub const AV_PIX_FMT_GBRP14LE: ::libc::c_int = 316;
pub const AV_PIX_FMT_GBRAP: ::libc::c_int = 317;
pub const AV_PIX_FMT_GBRAP16BE: ::libc::c_int = 318;
pub const AV_PIX_FMT_GBRAP16LE: ::libc::c_int = 319;
pub const AV_PIX_FMT_YUVJ411P: ::libc::c_int = 320;
pub const AV_PIX_FMT_BAYER_BGGR8: ::libc::c_int = 321;
pub const AV_PIX_FMT_BAYER_RGGB8: ::libc::c_int = 322;
pub const AV_PIX_FMT_BAYER_GBRG8: ::libc::c_int = 323;
pub const AV_PIX_FMT_BAYER_GRBG8: ::libc::c_int = 324;
pub const AV_PIX_FMT_BAYER_BGGR16LE: ::libc::c_int = 325;
pub const AV_PIX_FMT_BAYER_BGGR16BE: ::libc::c_int = 326;
pub const AV_PIX_FMT_BAYER_RGGB16LE: ::libc::c_int = 327;
pub const AV_PIX_FMT_BAYER_RGGB16BE: ::libc::c_int = 328;
pub const AV_PIX_FMT_BAYER_GBRG16LE: ::libc::c_int = 329;
pub const AV_PIX_FMT_BAYER_GBRG16BE: ::libc::c_int = 330;
pub const AV_PIX_FMT_BAYER_GRBG16LE: ::libc::c_int = 331;
pub const AV_PIX_FMT_BAYER_GRBG16BE: ::libc::c_int = 332;
pub const AV_PIX_FMT_NB: ::libc::c_int = 333;
pub const PIX_FMT_NONE: ::libc::c_int = -1;
pub const PIX_FMT_YUV420P: ::libc::c_int = 0;
pub const PIX_FMT_YUYV422: ::libc::c_int = 1;
pub const PIX_FMT_RGB24: ::libc::c_int = 2;
pub const PIX_FMT_BGR24: ::libc::c_int = 3;
pub const PIX_FMT_YUV422P: ::libc::c_int = 4;
pub const PIX_FMT_YUV444P: ::libc::c_int = 5;
pub const PIX_FMT_YUV410P: ::libc::c_int = 6;
pub const PIX_FMT_YUV411P: ::libc::c_int = 7;
pub const PIX_FMT_GRAY8: ::libc::c_int = 8;
pub const PIX_FMT_MONOWHITE: ::libc::c_int = 9;
pub const PIX_FMT_MONOBLACK: ::libc::c_int = 10;
pub const PIX_FMT_PAL8: ::libc::c_int = 11;
pub const PIX_FMT_YUVJ420P: ::libc::c_int = 12;
pub const PIX_FMT_YUVJ422P: ::libc::c_int = 13;
pub const PIX_FMT_YUVJ444P: ::libc::c_int = 14;
pub const PIX_FMT_XVMC_MPEG2_MC: ::libc::c_int = 15;
pub const PIX_FMT_XVMC_MPEG2_IDCT: ::libc::c_int = 16;
pub const PIX_FMT_UYVY422: ::libc::c_int = 17;
pub const PIX_FMT_UYYVYY411: ::libc::c_int = 18;
pub const PIX_FMT_BGR8: ::libc::c_int = 19;
pub const PIX_FMT_BGR4: ::libc::c_int = 20;
pub const PIX_FMT_BGR4_BYTE: ::libc::c_int = 21;
pub const PIX_FMT_RGB8: ::libc::c_int = 22;
pub const PIX_FMT_RGB4: ::libc::c_int = 23;
pub const PIX_FMT_RGB4_BYTE: ::libc::c_int = 24;
pub const PIX_FMT_NV12: ::libc::c_int = 25;
pub const PIX_FMT_NV21: ::libc::c_int = 26;
pub const PIX_FMT_ARGB: ::libc::c_int = 27;
pub const PIX_FMT_RGBA: ::libc::c_int = 28;
pub const PIX_FMT_ABGR: ::libc::c_int = 29;
pub const PIX_FMT_BGRA: ::libc::c_int = 30;
pub const PIX_FMT_GRAY16BE: ::libc::c_int = 31;
pub const PIX_FMT_GRAY16LE: ::libc::c_int = 32;
pub const PIX_FMT_YUV440P: ::libc::c_int = 33;
pub const PIX_FMT_YUVJ440P: ::libc::c_int = 34;
pub const PIX_FMT_YUVA420P: ::libc::c_int = 35;
pub const PIX_FMT_VDPAU_H264: ::libc::c_int = 36;
pub const PIX_FMT_VDPAU_MPEG1: ::libc::c_int = 37;
pub const PIX_FMT_VDPAU_MPEG2: ::libc::c_int = 38;
pub const PIX_FMT_VDPAU_WMV3: ::libc::c_int = 39;
pub const PIX_FMT_VDPAU_VC1: ::libc::c_int = 40;
pub const PIX_FMT_RGB48BE: ::libc::c_int = 41;
pub const PIX_FMT_RGB48LE: ::libc::c_int = 42;
pub const PIX_FMT_RGB565BE: ::libc::c_int = 43;
pub const PIX_FMT_RGB565LE: ::libc::c_int = 44;
pub const PIX_FMT_RGB555BE: ::libc::c_int = 45;
pub const PIX_FMT_RGB555LE: ::libc::c_int = 46;
pub const PIX_FMT_BGR565BE: ::libc::c_int = 47;
pub const PIX_FMT_BGR565LE: ::libc::c_int = 48;
pub const PIX_FMT_BGR555BE: ::libc::c_int = 49;
pub const PIX_FMT_BGR555LE: ::libc::c_int = 50;
pub const PIX_FMT_VAAPI_MOCO: ::libc::c_int = 51;
pub const PIX_FMT_VAAPI_IDCT: ::libc::c_int = 52;
pub const PIX_FMT_VAAPI_VLD: ::libc::c_int = 53;
pub const PIX_FMT_YUV420P16LE: ::libc::c_int = 54;
pub const PIX_FMT_YUV420P16BE: ::libc::c_int = 55;
pub const PIX_FMT_YUV422P16LE: ::libc::c_int = 56;
pub const PIX_FMT_YUV422P16BE: ::libc::c_int = 57;
pub const PIX_FMT_YUV444P16LE: ::libc::c_int = 58;
pub const PIX_FMT_YUV444P16BE: ::libc::c_int = 59;
pub const PIX_FMT_VDPAU_MPEG4: ::libc::c_int = 60;
pub const PIX_FMT_DXVA2_VLD: ::libc::c_int = 61;
pub const PIX_FMT_RGB444LE: ::libc::c_int = 62;
pub const PIX_FMT_RGB444BE: ::libc::c_int = 63;
pub const PIX_FMT_BGR444LE: ::libc::c_int = 64;
pub const PIX_FMT_BGR444BE: ::libc::c_int = 65;
pub const PIX_FMT_GRAY8A: ::libc::c_int = 66;
pub const PIX_FMT_BGR48BE: ::libc::c_int = 67;
pub const PIX_FMT_BGR48LE: ::libc::c_int = 68;
pub const PIX_FMT_YUV420P9BE: ::libc::c_int = 69;
pub const PIX_FMT_YUV420P9LE: ::libc::c_int = 70;
pub const PIX_FMT_YUV420P10BE: ::libc::c_int = 71;
pub const PIX_FMT_YUV420P10LE: ::libc::c_int = 72;
pub const PIX_FMT_YUV422P10BE: ::libc::c_int = 73;
pub const PIX_FMT_YUV422P10LE: ::libc::c_int = 74;
pub const PIX_FMT_YUV444P9BE: ::libc::c_int = 75;
pub const PIX_FMT_YUV444P9LE: ::libc::c_int = 76;
pub const PIX_FMT_YUV444P10BE: ::libc::c_int = 77;
pub const PIX_FMT_YUV444P10LE: ::libc::c_int = 78;
pub const PIX_FMT_YUV422P9BE: ::libc::c_int = 79;
pub const PIX_FMT_YUV422P9LE: ::libc::c_int = 80;
pub const PIX_FMT_VDA_VLD: ::libc::c_int = 81;
pub const PIX_FMT_GBRP: ::libc::c_int = 82;
pub const PIX_FMT_GBRP9BE: ::libc::c_int = 83;
pub const PIX_FMT_GBRP9LE: ::libc::c_int = 84;
pub const PIX_FMT_GBRP10BE: ::libc::c_int = 85;
pub const PIX_FMT_GBRP10LE: ::libc::c_int = 86;
pub const PIX_FMT_GBRP16BE: ::libc::c_int = 87;
pub const PIX_FMT_GBRP16LE: ::libc::c_int = 88;
pub const PIX_FMT_RGBA64BE: ::libc::c_int = 291;
pub const PIX_FMT_RGBA64LE: ::libc::c_int = 292;
pub const PIX_FMT_BGRA64BE: ::libc::c_int = 293;
pub const PIX_FMT_BGRA64LE: ::libc::c_int = 294;
pub const PIX_FMT_0RGB: ::libc::c_int = 295;
pub const PIX_FMT_RGB0: ::libc::c_int = 296;
pub const PIX_FMT_0BGR: ::libc::c_int = 297;
pub const PIX_FMT_BGR0: ::libc::c_int = 298;
pub const PIX_FMT_YUVA444P: ::libc::c_int = 299;
pub const PIX_FMT_YUVA422P: ::libc::c_int = 300;
pub const PIX_FMT_YUV420P12BE: ::libc::c_int = 301;
pub const PIX_FMT_YUV420P12LE: ::libc::c_int = 302;
pub const PIX_FMT_YUV420P14BE: ::libc::c_int = 303;
pub const PIX_FMT_YUV420P14LE: ::libc::c_int = 304;
pub const PIX_FMT_YUV422P12BE: ::libc::c_int = 305;
pub const PIX_FMT_YUV422P12LE: ::libc::c_int = 306;
pub const PIX_FMT_YUV422P14BE: ::libc::c_int = 307;
pub const PIX_FMT_YUV422P14LE: ::libc::c_int = 308;
pub const PIX_FMT_YUV444P12BE: ::libc::c_int = 309;
pub const PIX_FMT_YUV444P12LE: ::libc::c_int = 310;
pub const PIX_FMT_YUV444P14BE: ::libc::c_int = 311;
pub const PIX_FMT_YUV444P14LE: ::libc::c_int = 312;
pub const PIX_FMT_GBRP12BE: ::libc::c_int = 313;
pub const PIX_FMT_GBRP12LE: ::libc::c_int = 314;
pub const PIX_FMT_GBRP14BE: ::libc::c_int = 315;
pub const PIX_FMT_GBRP14LE: ::libc::c_int = 316;
pub const PIX_FMT_NB: ::libc::c_int = 317;
pub type Enum_AVSampleFormat = ::libc::c_int;
pub const AV_SAMPLE_FMT_NONE: ::libc::c_int = -1;
pub const AV_SAMPLE_FMT_U8: ::libc::c_int = 0;
pub const AV_SAMPLE_FMT_S16: ::libc::c_int = 1;
pub const AV_SAMPLE_FMT_S32: ::libc::c_int = 2;
pub const AV_SAMPLE_FMT_FLT: ::libc::c_int = 3;
pub const AV_SAMPLE_FMT_DBL: ::libc::c_int = 4;
pub const AV_SAMPLE_FMT_U8P: ::libc::c_int = 5;
pub const AV_SAMPLE_FMT_S16P: ::libc::c_int = 6;
pub const AV_SAMPLE_FMT_S32P: ::libc::c_int = 7;
pub const AV_SAMPLE_FMT_FLTP: ::libc::c_int = 8;
pub const AV_SAMPLE_FMT_DBLP: ::libc::c_int = 9;
pub const AV_SAMPLE_FMT_NB: ::libc::c_int = 10;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AVDictionaryEntry {
    pub key: *mut ::libc::c_char,
    pub value: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_AVDictionaryEntry {
    fn clone(&self) -> Struct_AVDictionaryEntry { *self }
}
impl ::std::default::Default for Struct_AVDictionaryEntry {
    fn default() -> Struct_AVDictionaryEntry {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AVDictionaryEntry = Struct_AVDictionaryEntry;
pub enum Struct_AVDictionary { }
pub type AVDictionary = Struct_AVDictionary;
pub type Enum_AVMatrixEncoding = ::libc::c_uint;
pub const AV_MATRIX_ENCODING_NONE: ::libc::c_uint = 0;
pub const AV_MATRIX_ENCODING_DOLBY: ::libc::c_uint = 1;
pub const AV_MATRIX_ENCODING_DPLII: ::libc::c_uint = 2;
pub const AV_MATRIX_ENCODING_DPLIIX: ::libc::c_uint = 3;
pub const AV_MATRIX_ENCODING_DPLIIZ: ::libc::c_uint = 4;
pub const AV_MATRIX_ENCODING_DOLBYEX: ::libc::c_uint = 5;
pub const AV_MATRIX_ENCODING_DOLBYHEADPHONE: ::libc::c_uint = 6;
pub const AV_MATRIX_ENCODING_NB: ::libc::c_uint = 7;
pub enum Struct_AVBPrint { }
pub type Enum_AVOptionType = ::libc::c_uint;
pub const AV_OPT_TYPE_FLAGS: ::libc::c_uint = 0;
pub const AV_OPT_TYPE_INT: ::libc::c_uint = 1;
pub const AV_OPT_TYPE_INT64: ::libc::c_uint = 2;
pub const AV_OPT_TYPE_DOUBLE: ::libc::c_uint = 3;
pub const AV_OPT_TYPE_FLOAT: ::libc::c_uint = 4;
pub const AV_OPT_TYPE_STRING: ::libc::c_uint = 5;
pub const AV_OPT_TYPE_RATIONAL: ::libc::c_uint = 6;
pub const AV_OPT_TYPE_BINARY: ::libc::c_uint = 7;
pub const AV_OPT_TYPE_CONST: ::libc::c_uint = 128;
pub const AV_OPT_TYPE_IMAGE_SIZE: ::libc::c_uint = 1397316165;
pub const AV_OPT_TYPE_PIXEL_FMT: ::libc::c_uint = 1346784596;
pub const AV_OPT_TYPE_SAMPLE_FMT: ::libc::c_uint = 1397116244;
pub const AV_OPT_TYPE_VIDEO_RATE: ::libc::c_uint = 1448231252;
pub const AV_OPT_TYPE_DURATION: ::libc::c_uint = 1146442272;
pub const AV_OPT_TYPE_COLOR: ::libc::c_uint = 1129270354;
pub const AV_OPT_TYPE_CHANNEL_LAYOUT: ::libc::c_uint = 1128811585;
pub const FF_OPT_TYPE_FLAGS: ::libc::c_uint = 0;
pub const FF_OPT_TYPE_INT: ::libc::c_uint = 1;
pub const FF_OPT_TYPE_INT64: ::libc::c_uint = 2;
pub const FF_OPT_TYPE_DOUBLE: ::libc::c_uint = 3;
pub const FF_OPT_TYPE_FLOAT: ::libc::c_uint = 4;
pub const FF_OPT_TYPE_STRING: ::libc::c_uint = 5;
pub const FF_OPT_TYPE_RATIONAL: ::libc::c_uint = 6;
pub const FF_OPT_TYPE_BINARY: ::libc::c_uint = 7;
pub const FF_OPT_TYPE_CONST: ::libc::c_uint = 128;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AVOption {
    pub name: *const ::libc::c_char,
    pub help: *const ::libc::c_char,
    pub offset: ::libc::c_int,
    pub _type: Enum_AVOptionType,
    pub default_val: Union_Unnamed2,
    pub min: ::libc::c_double,
    pub max: ::libc::c_double,
    pub flags: ::libc::c_int,
    pub unit: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_AVOption {
    fn clone(&self) -> Struct_AVOption { *self }
}
impl ::std::default::Default for Struct_AVOption {
    fn default() -> Struct_AVOption { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed2 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed2 {
    pub unsafe fn i64(&mut self) -> *mut int64_t {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn dbl(&mut self) -> *mut ::libc::c_double {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn str(&mut self) -> *mut *const ::libc::c_char {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn q(&mut self) -> *mut AVRational {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::clone::Clone for Union_Unnamed2 {
    fn clone(&self) -> Union_Unnamed2 { *self }
}
impl ::std::default::Default for Union_Unnamed2 {
    fn default() -> Union_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
pub type AVOption = Struct_AVOption;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AVOptionRange {
    pub _str: *const ::libc::c_char,
    pub value_min: ::libc::c_double,
    pub value_max: ::libc::c_double,
    pub component_min: ::libc::c_double,
    pub component_max: ::libc::c_double,
    pub is_range: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_AVOptionRange {
    fn clone(&self) -> Struct_AVOptionRange { *self }
}
impl ::std::default::Default for Struct_AVOptionRange {
    fn default() -> Struct_AVOptionRange { unsafe { ::std::mem::zeroed() } }
}
pub type AVOptionRange = Struct_AVOptionRange;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AVOptionRanges {
    pub range: *mut *mut AVOptionRange,
    pub nb_ranges: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_AVOptionRanges {
    fn clone(&self) -> Struct_AVOptionRanges { *self }
}
impl ::std::default::Default for Struct_AVOptionRanges {
    fn default() -> Struct_AVOptionRanges { unsafe { ::std::mem::zeroed() } }
}
pub type AVOptionRanges = Struct_AVOptionRanges;
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const AV_OPT_FLAG_IMPLICIT_KEY: ::libc::c_uint = 1;
pub enum Struct_AVBuffer { }
pub type AVBuffer = Struct_AVBuffer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AVBufferRef {
    pub buffer: *mut AVBuffer,
    pub data: *mut uint8_t,
    pub size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_AVBufferRef {
    fn clone(&self) -> Struct_AVBufferRef { *self }
}
impl ::std::default::Default for Struct_AVBufferRef {
    fn default() -> Struct_AVBufferRef { unsafe { ::std::mem::zeroed() } }
}
pub type AVBufferRef = Struct_AVBufferRef;
pub enum Struct_AVBufferPool { }
pub type AVBufferPool = Struct_AVBufferPool;
pub type Enum_AVColorSpace = ::libc::c_uint;
pub const AVCOL_SPC_RGB: ::libc::c_uint = 0;
pub const AVCOL_SPC_BT709: ::libc::c_uint = 1;
pub const AVCOL_SPC_UNSPECIFIED: ::libc::c_uint = 2;
pub const AVCOL_SPC_FCC: ::libc::c_uint = 4;
pub const AVCOL_SPC_BT470BG: ::libc::c_uint = 5;
pub const AVCOL_SPC_SMPTE170M: ::libc::c_uint = 6;
pub const AVCOL_SPC_SMPTE240M: ::libc::c_uint = 7;
pub const AVCOL_SPC_YCOCG: ::libc::c_uint = 8;
pub const AVCOL_SPC_BT2020_NCL: ::libc::c_uint = 9;
pub const AVCOL_SPC_BT2020_CL: ::libc::c_uint = 10;
pub const AVCOL_SPC_NB: ::libc::c_uint = 11;
pub type Enum_AVColorRange = ::libc::c_uint;
pub const AVCOL_RANGE_UNSPECIFIED: ::libc::c_uint = 0;
pub const AVCOL_RANGE_MPEG: ::libc::c_uint = 1;
pub const AVCOL_RANGE_JPEG: ::libc::c_uint = 2;
pub const AVCOL_RANGE_NB: ::libc::c_uint = 3;
pub type Enum_AVFrameSideDataType = ::libc::c_uint;
pub const AV_FRAME_DATA_PANSCAN: ::libc::c_uint = 0;
pub const AV_FRAME_DATA_A53_CC: ::libc::c_uint = 1;
pub const AV_FRAME_DATA_STEREO3D: ::libc::c_uint = 2;
pub const AV_FRAME_DATA_MATRIXENCODING: ::libc::c_uint = 3;
pub const AV_FRAME_DATA_DOWNMIX_INFO: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AVFrameSideData {
    pub _type: Enum_AVFrameSideDataType,
    pub data: *mut uint8_t,
    pub size: ::libc::c_int,
    pub metadata: *mut AVDictionary,
}
impl ::std::clone::Clone for Struct_AVFrameSideData {
    fn clone(&self) -> Struct_AVFrameSideData { *self }
}
impl ::std::default::Default for Struct_AVFrameSideData {
    fn default() -> Struct_AVFrameSideData { unsafe { ::std::mem::zeroed() } }
}
pub type AVFrameSideData = Struct_AVFrameSideData;
pub enum Struct_AVPanScan { }
pub enum Struct_AVCodecContext { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AVFrame {
    pub data: [*mut uint8_t; 8usize],
    pub linesize: [::libc::c_int; 8usize],
    pub extended_data: *mut *mut uint8_t,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub nb_samples: ::libc::c_int,
    pub format: ::libc::c_int,
    pub key_frame: ::libc::c_int,
    pub pict_type: Enum_AVPictureType,
    pub base: [*mut uint8_t; 8usize],
    pub sample_aspect_ratio: AVRational,
    pub pts: int64_t,
    pub pkt_pts: int64_t,
    pub pkt_dts: int64_t,
    pub coded_picture_number: ::libc::c_int,
    pub display_picture_number: ::libc::c_int,
    pub quality: ::libc::c_int,
    pub reference: ::libc::c_int,
    pub qscale_table: *mut int8_t,
    pub qstride: ::libc::c_int,
    pub qscale_type: ::libc::c_int,
    pub mbskip_table: *mut uint8_t,
    pub motion_val: [*mut ::libc::c_void; 2usize],
    pub mb_type: *mut uint32_t,
    pub dct_coeff: *mut ::libc::c_short,
    pub ref_index: [*mut int8_t; 2usize],
    pub opaque: *mut ::libc::c_void,
    pub error: [uint64_t; 8usize],
    pub _type: ::libc::c_int,
    pub repeat_pict: ::libc::c_int,
    pub interlaced_frame: ::libc::c_int,
    pub top_field_first: ::libc::c_int,
    pub palette_has_changed: ::libc::c_int,
    pub buffer_hints: ::libc::c_int,
    pub pan_scan: *mut Struct_AVPanScan,
    pub reordered_opaque: int64_t,
    pub hwaccel_picture_private: *mut ::libc::c_void,
    pub owner: *mut Struct_AVCodecContext,
    pub thread_opaque: *mut ::libc::c_void,
    pub motion_subsample_log2: uint8_t,
    pub sample_rate: ::libc::c_int,
    pub channel_layout: uint64_t,
    pub buf: [*mut AVBufferRef; 8usize],
    pub extended_buf: *mut *mut AVBufferRef,
    pub nb_extended_buf: ::libc::c_int,
    pub side_data: *mut *mut AVFrameSideData,
    pub nb_side_data: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub best_effort_timestamp: int64_t,
    pub pkt_pos: int64_t,
    pub pkt_duration: int64_t,
    pub metadata: *mut AVDictionary,
    pub decode_error_flags: ::libc::c_int,
    pub channels: ::libc::c_int,
    pub pkt_size: ::libc::c_int,
    pub colorspace: Enum_AVColorSpace,
    pub color_range: Enum_AVColorRange,
    pub qp_table_buf: *mut AVBufferRef,
}
impl ::std::clone::Clone for Struct_AVFrame {
    fn clone(&self) -> Struct_AVFrame { *self }
}
impl ::std::default::Default for Struct_AVFrame {
    fn default() -> Struct_AVFrame { unsafe { ::std::mem::zeroed() } }
}
pub type AVFrame = Struct_AVFrame;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Struct___va_list_tag { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Struct___va_list_tag { unsafe { ::std::mem::zeroed() } }
}

pub const AV_CH_FRONT_LEFT              : uint64_t = 0x00000001;
pub const AV_CH_FRONT_RIGHT             : uint64_t = 0x00000002;
pub const AV_CH_FRONT_CENTER            : uint64_t = 0x00000004;
pub const AV_CH_LOW_FREQUENCY           : uint64_t = 0x00000008;
pub const AV_CH_BACK_LEFT               : uint64_t = 0x00000010;
pub const AV_CH_BACK_RIGHT              : uint64_t = 0x00000020;
pub const AV_CH_FRONT_LEFT_OF_CENTER    : uint64_t = 0x00000040;
pub const AV_CH_FRONT_RIGHT_OF_CENTER   : uint64_t = 0x00000080;
pub const AV_CH_BACK_CENTER             : uint64_t = 0x00000100;
pub const AV_CH_SIDE_LEFT               : uint64_t = 0x00000200;
pub const AV_CH_SIDE_RIGHT              : uint64_t = 0x00000400;
pub const AV_CH_TOP_CENTER              : uint64_t = 0x00000800;
pub const AV_CH_TOP_FRONT_LEFT          : uint64_t = 0x00001000;
pub const AV_CH_TOP_FRONT_CENTER        : uint64_t = 0x00002000;
pub const AV_CH_TOP_FRONT_RIGHT         : uint64_t = 0x00004000;
pub const AV_CH_TOP_BACK_LEFT           : uint64_t = 0x00008000;
pub const AV_CH_TOP_BACK_CENTER         : uint64_t = 0x00010000;
pub const AV_CH_TOP_BACK_RIGHT          : uint64_t = 0x00020000;
pub const AV_CH_STEREO_LEFT             : uint64_t = 0x20000000;
pub const AV_CH_STEREO_RIGHT            : uint64_t = 0x40000000;
pub const AV_CH_WIDE_LEFT               : uint64_t = 0x0000000080000000u64;
pub const AV_CH_WIDE_RIGHT              : uint64_t = 0x0000000100000000u64;
pub const AV_CH_SURROUND_DIRECT_LEFT    : uint64_t = 0x0000000200000000u64;
pub const AV_CH_SURROUND_DIRECT_RIGHT   : uint64_t = 0x0000000400000000u64;
pub const AV_CH_LOW_FREQUENCY_2         : uint64_t = 0x0000000800000000u64;
pub const AV_CH_LAYOUT_NATIVE           : uint64_t = 0x8000000000000000u64;
pub const AV_CH_LAYOUT_MONO             : uint64_t = (AV_CH_FRONT_CENTER);
pub const AV_CH_LAYOUT_STEREO           : uint64_t = (AV_CH_FRONT_LEFT|AV_CH_FRONT_RIGHT);
pub const AV_CH_LAYOUT_2POINT1          : uint64_t = (AV_CH_LAYOUT_STEREO|AV_CH_LOW_FREQUENCY);
pub const AV_CH_LAYOUT_2_1              : uint64_t = (AV_CH_LAYOUT_STEREO|AV_CH_BACK_CENTER);
pub const AV_CH_LAYOUT_SURROUND         : uint64_t = (AV_CH_LAYOUT_STEREO|AV_CH_FRONT_CENTER);
pub const AV_CH_LAYOUT_3POINT1          : uint64_t = (AV_CH_LAYOUT_SURROUND|AV_CH_LOW_FREQUENCY);
pub const AV_CH_LAYOUT_4POINT0          : uint64_t = (AV_CH_LAYOUT_SURROUND|AV_CH_BACK_CENTER);
pub const AV_CH_LAYOUT_4POINT1          : uint64_t = (AV_CH_LAYOUT_4POINT0|AV_CH_LOW_FREQUENCY);
pub const AV_CH_LAYOUT_2_2              : uint64_t = (AV_CH_LAYOUT_STEREO|AV_CH_SIDE_LEFT|AV_CH_SIDE_RIGHT);
pub const AV_CH_LAYOUT_QUAD             : uint64_t = (AV_CH_LAYOUT_STEREO|AV_CH_BACK_LEFT|AV_CH_BACK_RIGHT);
pub const AV_CH_LAYOUT_5POINT0          : uint64_t = (AV_CH_LAYOUT_SURROUND|AV_CH_SIDE_LEFT|AV_CH_SIDE_RIGHT);
pub const AV_CH_LAYOUT_5POINT1          : uint64_t = (AV_CH_LAYOUT_5POINT0|AV_CH_LOW_FREQUENCY);
pub const AV_CH_LAYOUT_5POINT0_BACK     : uint64_t = (AV_CH_LAYOUT_SURROUND|AV_CH_BACK_LEFT|AV_CH_BACK_RIGHT);
pub const AV_CH_LAYOUT_5POINT1_BACK     : uint64_t = (AV_CH_LAYOUT_5POINT0_BACK|AV_CH_LOW_FREQUENCY);
pub const AV_CH_LAYOUT_6POINT0          : uint64_t = (AV_CH_LAYOUT_5POINT0|AV_CH_BACK_CENTER);
pub const AV_CH_LAYOUT_6POINT0_FRONT    : uint64_t = (AV_CH_LAYOUT_2_2|AV_CH_FRONT_LEFT_OF_CENTER|AV_CH_FRONT_RIGHT_OF_CENTER);
pub const AV_CH_LAYOUT_HEXAGONAL        : uint64_t = (AV_CH_LAYOUT_5POINT0_BACK|AV_CH_BACK_CENTER);
pub const AV_CH_LAYOUT_6POINT1          : uint64_t = (AV_CH_LAYOUT_5POINT1|AV_CH_BACK_CENTER);
pub const AV_CH_LAYOUT_6POINT1_BACK     : uint64_t = (AV_CH_LAYOUT_5POINT1_BACK|AV_CH_BACK_CENTER);
pub const AV_CH_LAYOUT_6POINT1_FRONT    : uint64_t = (AV_CH_LAYOUT_6POINT0_FRONT|AV_CH_LOW_FREQUENCY);
pub const AV_CH_LAYOUT_7POINT0          : uint64_t = (AV_CH_LAYOUT_5POINT0|AV_CH_BACK_LEFT|AV_CH_BACK_RIGHT);
pub const AV_CH_LAYOUT_7POINT0_FRONT    : uint64_t = (AV_CH_LAYOUT_5POINT0|AV_CH_FRONT_LEFT_OF_CENTER|AV_CH_FRONT_RIGHT_OF_CENTER);
pub const AV_CH_LAYOUT_7POINT1          : uint64_t = (AV_CH_LAYOUT_5POINT1|AV_CH_BACK_LEFT|AV_CH_BACK_RIGHT);
pub const AV_CH_LAYOUT_7POINT1_WIDE     : uint64_t = (AV_CH_LAYOUT_5POINT1|AV_CH_FRONT_LEFT_OF_CENTER|AV_CH_FRONT_RIGHT_OF_CENTER);
pub const AV_CH_LAYOUT_7POINT1_WIDE_BACK: uint64_t = (AV_CH_LAYOUT_5POINT1_BACK|AV_CH_FRONT_LEFT_OF_CENTER|AV_CH_FRONT_RIGHT_OF_CENTER);
pub const AV_CH_LAYOUT_OCTAGONAL        : uint64_t = (AV_CH_LAYOUT_5POINT0|AV_CH_BACK_LEFT|AV_CH_BACK_CENTER|AV_CH_BACK_RIGHT);
pub const AV_CH_LAYOUT_STEREO_DOWNMIX   : uint64_t = (AV_CH_STEREO_LEFT|AV_CH_STEREO_RIGHT);

#[link(name = "avutil")]
extern "C" {
    pub fn avutil_version() -> ::libc::c_uint;
    pub fn avutil_configuration() -> *const ::libc::c_char;
    pub fn avutil_license() -> *const ::libc::c_char;
    pub fn av_get_media_type_string(media_type: Enum_AVMediaType)
     -> *const ::libc::c_char;
    pub fn av_get_picture_type_char(pict_type: Enum_AVPictureType)
     -> ::libc::c_char;
    pub fn av_strerror(errnum: ::libc::c_int, errbuf: *mut ::libc::c_char,
                       errbuf_size: size_t) -> ::libc::c_int;
    pub fn av_malloc(size: size_t) -> *mut ::libc::c_void;
    pub fn av_realloc(ptr: *mut ::libc::c_void, size: size_t)
     -> *mut ::libc::c_void;
    pub fn av_realloc_f(ptr: *mut ::libc::c_void, nelem: size_t,
                        elsize: size_t) -> *mut ::libc::c_void;
    pub fn av_reallocp(ptr: *mut ::libc::c_void, size: size_t)
     -> ::libc::c_int;
    pub fn av_realloc_array(ptr: *mut ::libc::c_void, nmemb: size_t,
                            size: size_t) -> *mut ::libc::c_void;
    pub fn av_reallocp_array(ptr: *mut ::libc::c_void, nmemb: size_t,
                             size: size_t) -> ::libc::c_int;
    pub fn av_free(ptr: *mut ::libc::c_void) -> ();
    pub fn av_mallocz(size: size_t) -> *mut ::libc::c_void;
    pub fn av_calloc(nmemb: size_t, size: size_t) -> *mut ::libc::c_void;
    pub fn av_strdup(s: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn av_memdup(p: *const ::libc::c_void, size: size_t)
     -> *mut ::libc::c_void;
    pub fn av_freep(ptr: *mut ::libc::c_void) -> ();
    pub fn av_dynarray_add(tab_ptr: *mut ::libc::c_void,
                           nb_ptr: *mut ::libc::c_int,
                           elem: *mut ::libc::c_void) -> ();
    pub fn av_dynarray2_add(tab_ptr: *mut *mut ::libc::c_void,
                            nb_ptr: *mut ::libc::c_int, elem_size: size_t,
                            elem_data: *const uint8_t) -> *mut ::libc::c_void;
    pub fn av_max_alloc(max: size_t) -> ();
    pub fn av_memcpy_backptr(dst: *mut uint8_t, back: ::libc::c_int,
                             cnt: ::libc::c_int) -> ();
    pub fn av_fast_realloc(ptr: *mut ::libc::c_void,
                           size: *mut ::libc::c_uint, min_size: size_t)
     -> *mut ::libc::c_void;
    pub fn av_fast_malloc(ptr: *mut ::libc::c_void, size: *mut ::libc::c_uint,
                          min_size: size_t) -> ();
    pub fn av_reduce(dst_num: *mut ::libc::c_int, dst_den: *mut ::libc::c_int,
                     num: int64_t, den: int64_t, max: int64_t)
     -> ::libc::c_int;
    pub fn av_mul_q(b: AVRational, c: AVRational) -> AVRational;
    pub fn av_div_q(b: AVRational, c: AVRational) -> AVRational;
    pub fn av_add_q(b: AVRational, c: AVRational) -> AVRational;
    pub fn av_sub_q(b: AVRational, c: AVRational) -> AVRational;
    pub fn av_d2q(d: ::libc::c_double, max: ::libc::c_int) -> AVRational;
    pub fn av_nearer_q(q: AVRational, q1: AVRational, q2: AVRational)
     -> ::libc::c_int;
    pub fn av_find_nearest_q_idx(q: AVRational, q_list: *const AVRational)
     -> ::libc::c_int;
    pub fn av_gcd(a: int64_t, b: int64_t) -> int64_t;
    pub fn av_rescale(a: int64_t, b: int64_t, c: int64_t) -> int64_t;
    pub fn av_rescale_rnd(a: int64_t, b: int64_t, c: int64_t,
                          arg1: Enum_AVRounding) -> int64_t;
    pub fn av_rescale_q(a: int64_t, bq: AVRational, cq: AVRational)
     -> int64_t;
    pub fn av_rescale_q_rnd(a: int64_t, bq: AVRational, cq: AVRational,
                            arg1: Enum_AVRounding) -> int64_t;
    pub fn av_compare_ts(ts_a: int64_t, tb_a: AVRational, ts_b: int64_t,
                         tb_b: AVRational) -> ::libc::c_int;
    pub fn av_compare_mod(a: uint64_t, b: uint64_t, _mod: uint64_t)
     -> int64_t;
    pub fn av_rescale_delta(in_tb: AVRational, in_ts: int64_t,
                            fs_tb: AVRational, duration: ::libc::c_int,
                            last: *mut int64_t, out_tb: AVRational)
     -> int64_t;
    pub fn av_add_stable(ts_tb: AVRational, ts: int64_t, inc_tb: AVRational,
                         inc: int64_t) -> int64_t;
    pub fn av_log(avcl: *mut ::libc::c_void, level: ::libc::c_int,
                  fmt: *const ::libc::c_char, ...) -> ();
    pub fn av_vlog(avcl: *mut ::libc::c_void, level: ::libc::c_int,
                   fmt: *const ::libc::c_char, vl: va_list) -> ();
    pub fn av_log_get_level() -> ::libc::c_int;
    pub fn av_log_set_level(level: ::libc::c_int) -> ();
    pub fn av_log_set_callback(callback:
                                   ::std::option::Option<extern "C" fn(arg1:
                                                                           *mut ::libc::c_void,
                                                                       arg2:
                                                                           ::libc::c_int,
                                                                       arg3:
                                                                           *const ::libc::c_char,
                                                                       arg4:
                                                                           va_list)
                                                             -> ()>) -> ();
    pub fn av_log_default_callback(avcl: *mut ::libc::c_void,
                                   level: ::libc::c_int,
                                   fmt: *const ::libc::c_char, vl: va_list)
     -> ();
    pub fn av_default_item_name(ctx: *mut ::libc::c_void)
     -> *const ::libc::c_char;
    pub fn av_default_get_category(ptr: *mut ::libc::c_void)
     -> AVClassCategory;
    pub fn av_log_format_line(ptr: *mut ::libc::c_void, level: ::libc::c_int,
                              fmt: *const ::libc::c_char, vl: va_list,
                              line: *mut ::libc::c_char,
                              line_size: ::libc::c_int,
                              print_prefix: *mut ::libc::c_int) -> ();
    pub fn av_log_set_flags(arg: ::libc::c_int) -> ();
    pub fn av_int_list_length_for_size(elsize: ::libc::c_uint,
                                       list: *const ::libc::c_void,
                                       term: uint64_t) -> ::libc::c_uint;
    pub fn av_fopen_utf8(path: *const ::libc::c_char,
                         mode: *const ::libc::c_char) -> *mut FILE;
    pub fn av_get_sample_fmt_name(sample_fmt: Enum_AVSampleFormat)
     -> *const ::libc::c_char;
    pub fn av_get_sample_fmt(name: *const ::libc::c_char)
     -> Enum_AVSampleFormat;
    pub fn av_get_alt_sample_fmt(sample_fmt: Enum_AVSampleFormat,
                                 planar: ::libc::c_int)
     -> Enum_AVSampleFormat;
    pub fn av_get_packed_sample_fmt(sample_fmt: Enum_AVSampleFormat)
     -> Enum_AVSampleFormat;
    pub fn av_get_planar_sample_fmt(sample_fmt: Enum_AVSampleFormat)
     -> Enum_AVSampleFormat;
    pub fn av_get_sample_fmt_string(buf: *mut ::libc::c_char,
                                    buf_size: ::libc::c_int,
                                    sample_fmt: Enum_AVSampleFormat)
     -> *mut ::libc::c_char;
    pub fn av_get_bits_per_sample_fmt(sample_fmt: Enum_AVSampleFormat)
     -> ::libc::c_int;
    pub fn av_get_bytes_per_sample(sample_fmt: Enum_AVSampleFormat)
     -> ::libc::c_int;
    pub fn av_sample_fmt_is_planar(sample_fmt: Enum_AVSampleFormat)
     -> ::libc::c_int;
    pub fn av_samples_get_buffer_size(linesize: *mut ::libc::c_int,
                                      nb_channels: ::libc::c_int,
                                      nb_samples: ::libc::c_int,
                                      sample_fmt: Enum_AVSampleFormat,
                                      align: ::libc::c_int) -> ::libc::c_int;
    pub fn av_samples_fill_arrays(audio_data: *mut *mut uint8_t,
                                  linesize: *mut ::libc::c_int,
                                  buf: *const uint8_t,
                                  nb_channels: ::libc::c_int,
                                  nb_samples: ::libc::c_int,
                                  sample_fmt: Enum_AVSampleFormat,
                                  align: ::libc::c_int) -> ::libc::c_int;
    pub fn av_samples_alloc(audio_data: *mut *mut uint8_t,
                            linesize: *mut ::libc::c_int,
                            nb_channels: ::libc::c_int,
                            nb_samples: ::libc::c_int,
                            sample_fmt: Enum_AVSampleFormat,
                            align: ::libc::c_int) -> ::libc::c_int;
    pub fn av_samples_alloc_array_and_samples(audio_data:
                                                  *mut *mut *mut uint8_t,
                                              linesize: *mut ::libc::c_int,
                                              nb_channels: ::libc::c_int,
                                              nb_samples: ::libc::c_int,
                                              sample_fmt: Enum_AVSampleFormat,
                                              align: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_samples_copy(dst: *mut *mut uint8_t, src: *const *mut uint8_t,
                           dst_offset: ::libc::c_int,
                           src_offset: ::libc::c_int,
                           nb_samples: ::libc::c_int,
                           nb_channels: ::libc::c_int,
                           sample_fmt: Enum_AVSampleFormat) -> ::libc::c_int;
    pub fn av_samples_set_silence(audio_data: *mut *mut uint8_t,
                                  offset: ::libc::c_int,
                                  nb_samples: ::libc::c_int,
                                  nb_channels: ::libc::c_int,
                                  sample_fmt: Enum_AVSampleFormat)
     -> ::libc::c_int;
    pub fn av_dict_get(m: *mut AVDictionary, key: *const ::libc::c_char,
                       prev: *const AVDictionaryEntry, flags: ::libc::c_int)
     -> *mut AVDictionaryEntry;
    pub fn av_dict_count(m: *const AVDictionary) -> ::libc::c_int;
    pub fn av_dict_set(pm: *mut *mut AVDictionary, key: *const ::libc::c_char,
                       value: *const ::libc::c_char, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_dict_parse_string(pm: *mut *mut AVDictionary,
                                str: *const ::libc::c_char,
                                key_val_sep: *const ::libc::c_char,
                                pairs_sep: *const ::libc::c_char,
                                flags: ::libc::c_int) -> ::libc::c_int;
    pub fn av_dict_copy(dst: *mut *mut AVDictionary, src: *mut AVDictionary,
                        flags: ::libc::c_int) -> ();
    pub fn av_dict_free(m: *mut *mut AVDictionary) -> ();
    pub fn av_gettime() -> int64_t;
    pub fn av_usleep(usec: ::libc::c_uint) -> ::libc::c_int;
    pub fn av_get_channel_layout(name: *const ::libc::c_char) -> uint64_t;
    pub fn av_get_channel_layout_string(buf: *mut ::libc::c_char,
                                        buf_size: ::libc::c_int,
                                        nb_channels: ::libc::c_int,
                                        channel_layout: uint64_t) -> ();
    pub fn av_bprint_channel_layout(bp: *mut Struct_AVBPrint,
                                    nb_channels: ::libc::c_int,
                                    channel_layout: uint64_t) -> ();
    pub fn av_get_channel_layout_nb_channels(channel_layout: uint64_t)
     -> ::libc::c_int;
    pub fn av_get_default_channel_layout(nb_channels: ::libc::c_int)
     -> int64_t;
    pub fn av_get_channel_layout_channel_index(channel_layout: uint64_t,
                                               channel: uint64_t)
     -> ::libc::c_int;
    pub fn av_channel_layout_extract_channel(channel_layout: uint64_t,
                                             index: ::libc::c_int)
     -> uint64_t;
    pub fn av_get_channel_name(channel: uint64_t) -> *const ::libc::c_char;
    pub fn av_get_channel_description(channel: uint64_t)
     -> *const ::libc::c_char;
    pub fn av_get_standard_channel_layout(index: ::libc::c_uint,
                                          layout: *mut uint64_t,
                                          name: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn av_find_opt(obj: *mut ::libc::c_void, name: *const ::libc::c_char,
                       unit: *const ::libc::c_char, mask: ::libc::c_int,
                       flags: ::libc::c_int) -> *const AVOption;
    pub fn av_set_string3(obj: *mut ::libc::c_void,
                          name: *const ::libc::c_char,
                          val: *const ::libc::c_char, alloc: ::libc::c_int,
                          o_out: *mut *const AVOption) -> ::libc::c_int;
    pub fn av_set_double(obj: *mut ::libc::c_void,
                         name: *const ::libc::c_char, n: ::libc::c_double)
     -> *const AVOption;
    pub fn av_set_q(obj: *mut ::libc::c_void, name: *const ::libc::c_char,
                    n: AVRational) -> *const AVOption;
    pub fn av_set_int(obj: *mut ::libc::c_void, name: *const ::libc::c_char,
                      n: int64_t) -> *const AVOption;
    pub fn av_get_double(obj: *mut ::libc::c_void,
                         name: *const ::libc::c_char,
                         o_out: *mut *const AVOption) -> ::libc::c_double;
    pub fn av_get_q(obj: *mut ::libc::c_void, name: *const ::libc::c_char,
                    o_out: *mut *const AVOption) -> AVRational;
    pub fn av_get_int(obj: *mut ::libc::c_void, name: *const ::libc::c_char,
                      o_out: *mut *const AVOption) -> int64_t;
    pub fn av_get_string(obj: *mut ::libc::c_void,
                         name: *const ::libc::c_char,
                         o_out: *mut *const AVOption,
                         buf: *mut ::libc::c_char, buf_len: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn av_next_option(obj: *mut ::libc::c_void, last: *const AVOption)
     -> *const AVOption;
    pub fn av_opt_show2(obj: *mut ::libc::c_void,
                        av_log_obj: *mut ::libc::c_void,
                        req_flags: ::libc::c_int, rej_flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_opt_set_defaults(s: *mut ::libc::c_void) -> ();
    pub fn av_opt_set_defaults2(s: *mut ::libc::c_void, mask: ::libc::c_int,
                                flags: ::libc::c_int) -> ();
    pub fn av_set_options_string(ctx: *mut ::libc::c_void,
                                 opts: *const ::libc::c_char,
                                 key_val_sep: *const ::libc::c_char,
                                 pairs_sep: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn av_opt_set_from_string(ctx: *mut ::libc::c_void,
                                  opts: *const ::libc::c_char,
                                  shorthand: *const *const ::libc::c_char,
                                  key_val_sep: *const ::libc::c_char,
                                  pairs_sep: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn av_opt_free(obj: *mut ::libc::c_void) -> ();
    pub fn av_opt_flag_is_set(obj: *mut ::libc::c_void,
                              field_name: *const ::libc::c_char,
                              flag_name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn av_opt_set_dict(obj: *mut ::libc::c_void,
                           options: *mut *mut Struct_AVDictionary)
     -> ::libc::c_int;
    pub fn av_opt_get_key_value(ropts: *mut *const ::libc::c_char,
                                key_val_sep: *const ::libc::c_char,
                                pairs_sep: *const ::libc::c_char,
                                flags: ::libc::c_uint,
                                rkey: *mut *mut ::libc::c_char,
                                rval: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn av_opt_eval_flags(obj: *mut ::libc::c_void, o: *const AVOption,
                             val: *const ::libc::c_char,
                             flags_out: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn av_opt_eval_int(obj: *mut ::libc::c_void, o: *const AVOption,
                           val: *const ::libc::c_char,
                           int_out: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn av_opt_eval_int64(obj: *mut ::libc::c_void, o: *const AVOption,
                             val: *const ::libc::c_char,
                             int64_out: *mut int64_t) -> ::libc::c_int;
    pub fn av_opt_eval_float(obj: *mut ::libc::c_void, o: *const AVOption,
                             val: *const ::libc::c_char,
                             float_out: *mut ::libc::c_float)
     -> ::libc::c_int;
    pub fn av_opt_eval_double(obj: *mut ::libc::c_void, o: *const AVOption,
                              val: *const ::libc::c_char,
                              double_out: *mut ::libc::c_double)
     -> ::libc::c_int;
    pub fn av_opt_eval_q(obj: *mut ::libc::c_void, o: *const AVOption,
                         val: *const ::libc::c_char, q_out: *mut AVRational)
     -> ::libc::c_int;
    pub fn av_opt_find(obj: *mut ::libc::c_void, name: *const ::libc::c_char,
                       unit: *const ::libc::c_char, opt_flags: ::libc::c_int,
                       search_flags: ::libc::c_int) -> *const AVOption;
    pub fn av_opt_find2(obj: *mut ::libc::c_void, name: *const ::libc::c_char,
                        unit: *const ::libc::c_char, opt_flags: ::libc::c_int,
                        search_flags: ::libc::c_int,
                        target_obj: *mut *mut ::libc::c_void)
     -> *const AVOption;
    pub fn av_opt_next(obj: *mut ::libc::c_void, prev: *const AVOption)
     -> *const AVOption;
    pub fn av_opt_child_next(obj: *mut ::libc::c_void,
                             prev: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn av_opt_child_class_next(parent: *const AVClass,
                                   prev: *const AVClass) -> *const AVClass;
    pub fn av_opt_set(obj: *mut ::libc::c_void, name: *const ::libc::c_char,
                      val: *const ::libc::c_char, search_flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_opt_set_int(obj: *mut ::libc::c_void,
                          name: *const ::libc::c_char, val: int64_t,
                          search_flags: ::libc::c_int) -> ::libc::c_int;
    pub fn av_opt_set_double(obj: *mut ::libc::c_void,
                             name: *const ::libc::c_char,
                             val: ::libc::c_double,
                             search_flags: ::libc::c_int) -> ::libc::c_int;
    pub fn av_opt_set_q(obj: *mut ::libc::c_void, name: *const ::libc::c_char,
                        val: AVRational, search_flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_opt_set_bin(obj: *mut ::libc::c_void,
                          name: *const ::libc::c_char, val: *const uint8_t,
                          size: ::libc::c_int, search_flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_opt_set_image_size(obj: *mut ::libc::c_void,
                                 name: *const ::libc::c_char,
                                 w: ::libc::c_int, h: ::libc::c_int,
                                 search_flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_opt_set_pixel_fmt(obj: *mut ::libc::c_void,
                                name: *const ::libc::c_char,
                                fmt: Enum_AVPixelFormat,
                                search_flags: ::libc::c_int) -> ::libc::c_int;
    pub fn av_opt_set_sample_fmt(obj: *mut ::libc::c_void,
                                 name: *const ::libc::c_char,
                                 fmt: Enum_AVSampleFormat,
                                 search_flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_opt_set_video_rate(obj: *mut ::libc::c_void,
                                 name: *const ::libc::c_char, val: AVRational,
                                 search_flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_opt_set_channel_layout(obj: *mut ::libc::c_void,
                                     name: *const ::libc::c_char,
                                     ch_layout: int64_t,
                                     search_flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_opt_get(obj: *mut ::libc::c_void, name: *const ::libc::c_char,
                      search_flags: ::libc::c_int, out_val: *mut *mut uint8_t)
     -> ::libc::c_int;
    pub fn av_opt_get_int(obj: *mut ::libc::c_void,
                          name: *const ::libc::c_char,
                          search_flags: ::libc::c_int, out_val: *mut int64_t)
     -> ::libc::c_int;
    pub fn av_opt_get_double(obj: *mut ::libc::c_void,
                             name: *const ::libc::c_char,
                             search_flags: ::libc::c_int,
                             out_val: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn av_opt_get_q(obj: *mut ::libc::c_void, name: *const ::libc::c_char,
                        search_flags: ::libc::c_int, out_val: *mut AVRational)
     -> ::libc::c_int;
    pub fn av_opt_get_image_size(obj: *mut ::libc::c_void,
                                 name: *const ::libc::c_char,
                                 search_flags: ::libc::c_int,
                                 w_out: *mut ::libc::c_int,
                                 h_out: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn av_opt_get_pixel_fmt(obj: *mut ::libc::c_void,
                                name: *const ::libc::c_char,
                                search_flags: ::libc::c_int,
                                out_fmt: *mut Enum_AVPixelFormat)
     -> ::libc::c_int;
    pub fn av_opt_get_sample_fmt(obj: *mut ::libc::c_void,
                                 name: *const ::libc::c_char,
                                 search_flags: ::libc::c_int,
                                 out_fmt: *mut Enum_AVSampleFormat)
     -> ::libc::c_int;
    pub fn av_opt_get_video_rate(obj: *mut ::libc::c_void,
                                 name: *const ::libc::c_char,
                                 search_flags: ::libc::c_int,
                                 out_val: *mut AVRational) -> ::libc::c_int;
    pub fn av_opt_get_channel_layout(obj: *mut ::libc::c_void,
                                     name: *const ::libc::c_char,
                                     search_flags: ::libc::c_int,
                                     ch_layout: *mut int64_t)
     -> ::libc::c_int;
    pub fn av_opt_ptr(avclass: *const AVClass, obj: *mut ::libc::c_void,
                      name: *const ::libc::c_char) -> *mut ::libc::c_void;
    pub fn av_opt_freep_ranges(ranges: *mut *mut AVOptionRanges) -> ();
    pub fn av_opt_query_ranges(arg1: *mut *mut AVOptionRanges,
                               obj: *mut ::libc::c_void,
                               key: *const ::libc::c_char,
                               flags: ::libc::c_int) -> ::libc::c_int;
    pub fn av_opt_query_ranges_default(arg1: *mut *mut AVOptionRanges,
                                       obj: *mut ::libc::c_void,
                                       key: *const ::libc::c_char,
                                       flags: ::libc::c_int) -> ::libc::c_int;
    pub fn av_buffer_alloc(size: ::libc::c_int) -> *mut AVBufferRef;
    pub fn av_buffer_allocz(size: ::libc::c_int) -> *mut AVBufferRef;
    pub fn av_buffer_create(data: *mut uint8_t, size: ::libc::c_int,
                            free:
                                ::std::option::Option<extern "C" fn(opaque:
                                                                        *mut ::libc::c_void,
                                                                    data:
                                                                        *mut uint8_t)
                                                          -> ()>,
                            opaque: *mut ::libc::c_void, flags: ::libc::c_int)
     -> *mut AVBufferRef;
    pub fn av_buffer_default_free(opaque: *mut ::libc::c_void,
                                  data: *mut uint8_t) -> ();
    pub fn av_buffer_ref(buf: *mut AVBufferRef) -> *mut AVBufferRef;
    pub fn av_buffer_unref(buf: *mut *mut AVBufferRef) -> ();
    pub fn av_buffer_is_writable(buf: *const AVBufferRef) -> ::libc::c_int;
    pub fn av_buffer_get_opaque(buf: *const AVBufferRef)
     -> *mut ::libc::c_void;
    pub fn av_buffer_get_ref_count(buf: *const AVBufferRef) -> ::libc::c_int;
    pub fn av_buffer_make_writable(buf: *mut *mut AVBufferRef)
     -> ::libc::c_int;
    pub fn av_buffer_realloc(buf: *mut *mut AVBufferRef, size: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_buffer_pool_init(size: ::libc::c_int,
                               alloc:
                                   ::std::option::Option<extern "C" fn(size:
                                                                           ::libc::c_int)
                                                             ->
                                                                 *mut AVBufferRef>)
     -> *mut AVBufferPool;
    pub fn av_buffer_pool_uninit(pool: *mut *mut AVBufferPool) -> ();
    pub fn av_buffer_pool_get(pool: *mut AVBufferPool) -> *mut AVBufferRef;
    pub fn av_frame_get_best_effort_timestamp(frame: *const AVFrame)
     -> int64_t;
    pub fn av_frame_set_best_effort_timestamp(frame: *mut AVFrame,
                                              val: int64_t) -> ();
    pub fn av_frame_get_pkt_duration(frame: *const AVFrame) -> int64_t;
    pub fn av_frame_set_pkt_duration(frame: *mut AVFrame, val: int64_t) -> ();
    pub fn av_frame_get_pkt_pos(frame: *const AVFrame) -> int64_t;
    pub fn av_frame_set_pkt_pos(frame: *mut AVFrame, val: int64_t) -> ();
    pub fn av_frame_get_channel_layout(frame: *const AVFrame) -> int64_t;
    pub fn av_frame_set_channel_layout(frame: *mut AVFrame, val: int64_t)
     -> ();
    pub fn av_frame_get_channels(frame: *const AVFrame) -> ::libc::c_int;
    pub fn av_frame_set_channels(frame: *mut AVFrame, val: ::libc::c_int)
     -> ();
    pub fn av_frame_get_sample_rate(frame: *const AVFrame) -> ::libc::c_int;
    pub fn av_frame_set_sample_rate(frame: *mut AVFrame, val: ::libc::c_int)
     -> ();
    pub fn av_frame_get_metadata(frame: *const AVFrame) -> *mut AVDictionary;
    pub fn av_frame_set_metadata(frame: *mut AVFrame, val: *mut AVDictionary)
     -> ();
    pub fn av_frame_get_decode_error_flags(frame: *const AVFrame)
     -> ::libc::c_int;
    pub fn av_frame_set_decode_error_flags(frame: *mut AVFrame,
                                           val: ::libc::c_int) -> ();
    pub fn av_frame_get_pkt_size(frame: *const AVFrame) -> ::libc::c_int;
    pub fn av_frame_set_pkt_size(frame: *mut AVFrame, val: ::libc::c_int)
     -> ();
    pub fn avpriv_frame_get_metadatap(frame: *mut AVFrame)
     -> *mut *mut AVDictionary;
    pub fn av_frame_get_qp_table(f: *mut AVFrame, stride: *mut ::libc::c_int,
                                 _type: *mut ::libc::c_int) -> *mut int8_t;
    pub fn av_frame_set_qp_table(f: *mut AVFrame, buf: *mut AVBufferRef,
                                 stride: ::libc::c_int, _type: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_frame_get_colorspace(frame: *const AVFrame)
     -> Enum_AVColorSpace;
    pub fn av_frame_set_colorspace(frame: *mut AVFrame,
                                   val: Enum_AVColorSpace) -> ();
    pub fn av_frame_get_color_range(frame: *const AVFrame)
     -> Enum_AVColorRange;
    pub fn av_frame_set_color_range(frame: *mut AVFrame,
                                    val: Enum_AVColorRange) -> ();
    pub fn av_get_colorspace_name(val: Enum_AVColorSpace)
     -> *const ::libc::c_char;
    pub fn av_frame_alloc() -> *mut AVFrame;
    pub fn av_frame_free(frame: *mut *mut AVFrame) -> ();
    pub fn av_frame_ref(dst: *mut AVFrame, src: *const AVFrame)
     -> ::libc::c_int;
    pub fn av_frame_clone(src: *const AVFrame) -> *mut AVFrame;
    pub fn av_frame_unref(frame: *mut AVFrame) -> ();
    pub fn av_frame_move_ref(dst: *mut AVFrame, src: *mut AVFrame) -> ();
    pub fn av_frame_get_buffer(frame: *mut AVFrame, align: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_frame_is_writable(frame: *mut AVFrame) -> ::libc::c_int;
    pub fn av_frame_make_writable(frame: *mut AVFrame) -> ::libc::c_int;
    pub fn av_frame_copy(dst: *mut AVFrame, src: *const AVFrame)
     -> ::libc::c_int;
    pub fn av_frame_copy_props(dst: *mut AVFrame, src: *const AVFrame)
     -> ::libc::c_int;
    pub fn av_frame_get_plane_buffer(frame: *mut AVFrame,
                                     plane: ::libc::c_int)
     -> *mut AVBufferRef;
    pub fn av_frame_new_side_data(frame: *mut AVFrame,
                                  _type: Enum_AVFrameSideDataType,
                                  size: ::libc::c_int)
     -> *mut AVFrameSideData;
    pub fn av_frame_get_side_data(frame: *const AVFrame,
                                  _type: Enum_AVFrameSideDataType)
     -> *mut AVFrameSideData;
}

pub const AV_NOPTS_VALUE: int64_t = 0x8000000000000000u64 as int64_t;
pub const AV_TIME_BASE: ::libc::c_int = 1000000;
pub const AV_TIME_BASE_Q: Struct_AVRational = Struct_AVRational {num: 1, den: AV_TIME_BASE};

pub const AV_LOG_QUIET: ::libc::c_int = -8;
pub const AV_LOG_PANIC: ::libc::c_int = 0;
pub const AV_LOG_FATAL: ::libc::c_int = 8;
pub const AV_LOG_ERROR: ::libc::c_int = 16;
pub const AV_LOG_WARNING: ::libc::c_int = 24;
pub const AV_LOG_INFO: ::libc::c_int = 32;
pub const AV_LOG_VERBOSE: ::libc::c_int = 40;
pub const AV_LOG_DEBUG: ::libc::c_int = 48;

pub fn version() -> u32 {
    unsafe { avutil_version() as u32 }
}

pub fn license() -> &'static str {
    std::str::from_utf8(unsafe { std::ffi::CStr::from_ptr(avutil_license()) }.to_bytes()).ok().expect("invalid utf8")
}
