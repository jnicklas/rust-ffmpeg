#![crate_name = "avdevice54"]
#![crate_type = "dylib"]
#![allow(non_camel_case_types)]
/* automatically generated by rust-bindgen */
extern crate libc;

pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Struct___va_list_tag { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Struct___va_list_tag { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "avdevice")]
extern "C" {
    pub fn avdevice_version() -> ::libc::c_uint;
    pub fn avdevice_configuration() -> *const ::libc::c_char;
    pub fn avdevice_license() -> *const ::libc::c_char;
    pub fn avdevice_register_all() -> ();
}

pub fn version() -> u32 {
    unsafe { avdevice_version() as u32 }
}

pub fn license() -> &'static str {
    std::str::from_utf8(unsafe { std::ffi::CStr::from_ptr(avdevice_license()) }.to_bytes()).ok().expect("invalid utf8")
}
