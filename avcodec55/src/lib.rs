#![crate_name = "avcodec55"]
#![license = "MIT"]
#![crate_type = "dylib"]
#![allow(non_camel_case_types)]
/* automatically generated by rust-bindgen */
extern crate libc;
extern crate "avutil52" as avutil;
use libc::{size_t,uint8_t,int64_t,uint64_t,int16_t,uint32_t,uint16_t};

pub type __int128_t = ::libc::c_void;
pub type __uint128_t = ::libc::c_void;
pub type __builtin_va_list = [__va_list_tag, ..1u];
pub type Enum_AVCodecID = ::libc::c_uint;
pub static AV_CODEC_ID_NONE: ::libc::c_uint = 0;
pub static AV_CODEC_ID_MPEG1VIDEO: ::libc::c_uint = 1;
pub static AV_CODEC_ID_MPEG2VIDEO: ::libc::c_uint = 2;
pub static AV_CODEC_ID_MPEG2VIDEO_XVMC: ::libc::c_uint = 3;
pub static AV_CODEC_ID_H261: ::libc::c_uint = 4;
pub static AV_CODEC_ID_H263: ::libc::c_uint = 5;
pub static AV_CODEC_ID_RV10: ::libc::c_uint = 6;
pub static AV_CODEC_ID_RV20: ::libc::c_uint = 7;
pub static AV_CODEC_ID_MJPEG: ::libc::c_uint = 8;
pub static AV_CODEC_ID_MJPEGB: ::libc::c_uint = 9;
pub static AV_CODEC_ID_LJPEG: ::libc::c_uint = 10;
pub static AV_CODEC_ID_SP5X: ::libc::c_uint = 11;
pub static AV_CODEC_ID_JPEGLS: ::libc::c_uint = 12;
pub static AV_CODEC_ID_MPEG4: ::libc::c_uint = 13;
pub static AV_CODEC_ID_RAWVIDEO: ::libc::c_uint = 14;
pub static AV_CODEC_ID_MSMPEG4V1: ::libc::c_uint = 15;
pub static AV_CODEC_ID_MSMPEG4V2: ::libc::c_uint = 16;
pub static AV_CODEC_ID_MSMPEG4V3: ::libc::c_uint = 17;
pub static AV_CODEC_ID_WMV1: ::libc::c_uint = 18;
pub static AV_CODEC_ID_WMV2: ::libc::c_uint = 19;
pub static AV_CODEC_ID_H263P: ::libc::c_uint = 20;
pub static AV_CODEC_ID_H263I: ::libc::c_uint = 21;
pub static AV_CODEC_ID_FLV1: ::libc::c_uint = 22;
pub static AV_CODEC_ID_SVQ1: ::libc::c_uint = 23;
pub static AV_CODEC_ID_SVQ3: ::libc::c_uint = 24;
pub static AV_CODEC_ID_DVVIDEO: ::libc::c_uint = 25;
pub static AV_CODEC_ID_HUFFYUV: ::libc::c_uint = 26;
pub static AV_CODEC_ID_CYUV: ::libc::c_uint = 27;
pub static AV_CODEC_ID_H264: ::libc::c_uint = 28;
pub static AV_CODEC_ID_INDEO3: ::libc::c_uint = 29;
pub static AV_CODEC_ID_VP3: ::libc::c_uint = 30;
pub static AV_CODEC_ID_THEORA: ::libc::c_uint = 31;
pub static AV_CODEC_ID_ASV1: ::libc::c_uint = 32;
pub static AV_CODEC_ID_ASV2: ::libc::c_uint = 33;
pub static AV_CODEC_ID_FFV1: ::libc::c_uint = 34;
pub static AV_CODEC_ID_4XM: ::libc::c_uint = 35;
pub static AV_CODEC_ID_VCR1: ::libc::c_uint = 36;
pub static AV_CODEC_ID_CLJR: ::libc::c_uint = 37;
pub static AV_CODEC_ID_MDEC: ::libc::c_uint = 38;
pub static AV_CODEC_ID_ROQ: ::libc::c_uint = 39;
pub static AV_CODEC_ID_INTERPLAY_VIDEO: ::libc::c_uint = 40;
pub static AV_CODEC_ID_XAN_WC3: ::libc::c_uint = 41;
pub static AV_CODEC_ID_XAN_WC4: ::libc::c_uint = 42;
pub static AV_CODEC_ID_RPZA: ::libc::c_uint = 43;
pub static AV_CODEC_ID_CINEPAK: ::libc::c_uint = 44;
pub static AV_CODEC_ID_WS_VQA: ::libc::c_uint = 45;
pub static AV_CODEC_ID_MSRLE: ::libc::c_uint = 46;
pub static AV_CODEC_ID_MSVIDEO1: ::libc::c_uint = 47;
pub static AV_CODEC_ID_IDCIN: ::libc::c_uint = 48;
pub static AV_CODEC_ID_8BPS: ::libc::c_uint = 49;
pub static AV_CODEC_ID_SMC: ::libc::c_uint = 50;
pub static AV_CODEC_ID_FLIC: ::libc::c_uint = 51;
pub static AV_CODEC_ID_TRUEMOTION1: ::libc::c_uint = 52;
pub static AV_CODEC_ID_VMDVIDEO: ::libc::c_uint = 53;
pub static AV_CODEC_ID_MSZH: ::libc::c_uint = 54;
pub static AV_CODEC_ID_ZLIB: ::libc::c_uint = 55;
pub static AV_CODEC_ID_QTRLE: ::libc::c_uint = 56;
pub static AV_CODEC_ID_TSCC: ::libc::c_uint = 57;
pub static AV_CODEC_ID_ULTI: ::libc::c_uint = 58;
pub static AV_CODEC_ID_QDRAW: ::libc::c_uint = 59;
pub static AV_CODEC_ID_VIXL: ::libc::c_uint = 60;
pub static AV_CODEC_ID_QPEG: ::libc::c_uint = 61;
pub static AV_CODEC_ID_PNG: ::libc::c_uint = 62;
pub static AV_CODEC_ID_PPM: ::libc::c_uint = 63;
pub static AV_CODEC_ID_PBM: ::libc::c_uint = 64;
pub static AV_CODEC_ID_PGM: ::libc::c_uint = 65;
pub static AV_CODEC_ID_PGMYUV: ::libc::c_uint = 66;
pub static AV_CODEC_ID_PAM: ::libc::c_uint = 67;
pub static AV_CODEC_ID_FFVHUFF: ::libc::c_uint = 68;
pub static AV_CODEC_ID_RV30: ::libc::c_uint = 69;
pub static AV_CODEC_ID_RV40: ::libc::c_uint = 70;
pub static AV_CODEC_ID_VC1: ::libc::c_uint = 71;
pub static AV_CODEC_ID_WMV3: ::libc::c_uint = 72;
pub static AV_CODEC_ID_LOCO: ::libc::c_uint = 73;
pub static AV_CODEC_ID_WNV1: ::libc::c_uint = 74;
pub static AV_CODEC_ID_AASC: ::libc::c_uint = 75;
pub static AV_CODEC_ID_INDEO2: ::libc::c_uint = 76;
pub static AV_CODEC_ID_FRAPS: ::libc::c_uint = 77;
pub static AV_CODEC_ID_TRUEMOTION2: ::libc::c_uint = 78;
pub static AV_CODEC_ID_BMP: ::libc::c_uint = 79;
pub static AV_CODEC_ID_CSCD: ::libc::c_uint = 80;
pub static AV_CODEC_ID_MMVIDEO: ::libc::c_uint = 81;
pub static AV_CODEC_ID_ZMBV: ::libc::c_uint = 82;
pub static AV_CODEC_ID_AVS: ::libc::c_uint = 83;
pub static AV_CODEC_ID_SMACKVIDEO: ::libc::c_uint = 84;
pub static AV_CODEC_ID_NUV: ::libc::c_uint = 85;
pub static AV_CODEC_ID_KMVC: ::libc::c_uint = 86;
pub static AV_CODEC_ID_FLASHSV: ::libc::c_uint = 87;
pub static AV_CODEC_ID_CAVS: ::libc::c_uint = 88;
pub static AV_CODEC_ID_JPEG2000: ::libc::c_uint = 89;
pub static AV_CODEC_ID_VMNC: ::libc::c_uint = 90;
pub static AV_CODEC_ID_VP5: ::libc::c_uint = 91;
pub static AV_CODEC_ID_VP6: ::libc::c_uint = 92;
pub static AV_CODEC_ID_VP6F: ::libc::c_uint = 93;
pub static AV_CODEC_ID_TARGA: ::libc::c_uint = 94;
pub static AV_CODEC_ID_DSICINVIDEO: ::libc::c_uint = 95;
pub static AV_CODEC_ID_TIERTEXSEQVIDEO: ::libc::c_uint = 96;
pub static AV_CODEC_ID_TIFF: ::libc::c_uint = 97;
pub static AV_CODEC_ID_GIF: ::libc::c_uint = 98;
pub static AV_CODEC_ID_DXA: ::libc::c_uint = 99;
pub static AV_CODEC_ID_DNXHD: ::libc::c_uint = 100;
pub static AV_CODEC_ID_THP: ::libc::c_uint = 101;
pub static AV_CODEC_ID_SGI: ::libc::c_uint = 102;
pub static AV_CODEC_ID_C93: ::libc::c_uint = 103;
pub static AV_CODEC_ID_BETHSOFTVID: ::libc::c_uint = 104;
pub static AV_CODEC_ID_PTX: ::libc::c_uint = 105;
pub static AV_CODEC_ID_TXD: ::libc::c_uint = 106;
pub static AV_CODEC_ID_VP6A: ::libc::c_uint = 107;
pub static AV_CODEC_ID_AMV: ::libc::c_uint = 108;
pub static AV_CODEC_ID_VB: ::libc::c_uint = 109;
pub static AV_CODEC_ID_PCX: ::libc::c_uint = 110;
pub static AV_CODEC_ID_SUNRAST: ::libc::c_uint = 111;
pub static AV_CODEC_ID_INDEO4: ::libc::c_uint = 112;
pub static AV_CODEC_ID_INDEO5: ::libc::c_uint = 113;
pub static AV_CODEC_ID_MIMIC: ::libc::c_uint = 114;
pub static AV_CODEC_ID_RL2: ::libc::c_uint = 115;
pub static AV_CODEC_ID_ESCAPE124: ::libc::c_uint = 116;
pub static AV_CODEC_ID_DIRAC: ::libc::c_uint = 117;
pub static AV_CODEC_ID_BFI: ::libc::c_uint = 118;
pub static AV_CODEC_ID_CMV: ::libc::c_uint = 119;
pub static AV_CODEC_ID_MOTIONPIXELS: ::libc::c_uint = 120;
pub static AV_CODEC_ID_TGV: ::libc::c_uint = 121;
pub static AV_CODEC_ID_TGQ: ::libc::c_uint = 122;
pub static AV_CODEC_ID_TQI: ::libc::c_uint = 123;
pub static AV_CODEC_ID_AURA: ::libc::c_uint = 124;
pub static AV_CODEC_ID_AURA2: ::libc::c_uint = 125;
pub static AV_CODEC_ID_V210X: ::libc::c_uint = 126;
pub static AV_CODEC_ID_TMV: ::libc::c_uint = 127;
pub static AV_CODEC_ID_V210: ::libc::c_uint = 128;
pub static AV_CODEC_ID_DPX: ::libc::c_uint = 129;
pub static AV_CODEC_ID_MAD: ::libc::c_uint = 130;
pub static AV_CODEC_ID_FRWU: ::libc::c_uint = 131;
pub static AV_CODEC_ID_FLASHSV2: ::libc::c_uint = 132;
pub static AV_CODEC_ID_CDGRAPHICS: ::libc::c_uint = 133;
pub static AV_CODEC_ID_R210: ::libc::c_uint = 134;
pub static AV_CODEC_ID_ANM: ::libc::c_uint = 135;
pub static AV_CODEC_ID_BINKVIDEO: ::libc::c_uint = 136;
pub static AV_CODEC_ID_IFF_ILBM: ::libc::c_uint = 137;
pub static AV_CODEC_ID_IFF_BYTERUN1: ::libc::c_uint = 138;
pub static AV_CODEC_ID_KGV1: ::libc::c_uint = 139;
pub static AV_CODEC_ID_YOP: ::libc::c_uint = 140;
pub static AV_CODEC_ID_VP8: ::libc::c_uint = 141;
pub static AV_CODEC_ID_PICTOR: ::libc::c_uint = 142;
pub static AV_CODEC_ID_ANSI: ::libc::c_uint = 143;
pub static AV_CODEC_ID_A64_MULTI: ::libc::c_uint = 144;
pub static AV_CODEC_ID_A64_MULTI5: ::libc::c_uint = 145;
pub static AV_CODEC_ID_R10K: ::libc::c_uint = 146;
pub static AV_CODEC_ID_MXPEG: ::libc::c_uint = 147;
pub static AV_CODEC_ID_LAGARITH: ::libc::c_uint = 148;
pub static AV_CODEC_ID_PRORES: ::libc::c_uint = 149;
pub static AV_CODEC_ID_JV: ::libc::c_uint = 150;
pub static AV_CODEC_ID_DFA: ::libc::c_uint = 151;
pub static AV_CODEC_ID_WMV3IMAGE: ::libc::c_uint = 152;
pub static AV_CODEC_ID_VC1IMAGE: ::libc::c_uint = 153;
pub static AV_CODEC_ID_UTVIDEO: ::libc::c_uint = 154;
pub static AV_CODEC_ID_BMV_VIDEO: ::libc::c_uint = 155;
pub static AV_CODEC_ID_VBLE: ::libc::c_uint = 156;
pub static AV_CODEC_ID_DXTORY: ::libc::c_uint = 157;
pub static AV_CODEC_ID_V410: ::libc::c_uint = 158;
pub static AV_CODEC_ID_XWD: ::libc::c_uint = 159;
pub static AV_CODEC_ID_CDXL: ::libc::c_uint = 160;
pub static AV_CODEC_ID_XBM: ::libc::c_uint = 161;
pub static AV_CODEC_ID_ZEROCODEC: ::libc::c_uint = 162;
pub static AV_CODEC_ID_MSS1: ::libc::c_uint = 163;
pub static AV_CODEC_ID_MSA1: ::libc::c_uint = 164;
pub static AV_CODEC_ID_TSCC2: ::libc::c_uint = 165;
pub static AV_CODEC_ID_MTS2: ::libc::c_uint = 166;
pub static AV_CODEC_ID_CLLC: ::libc::c_uint = 167;
pub static AV_CODEC_ID_MSS2: ::libc::c_uint = 168;
pub static AV_CODEC_ID_VP9: ::libc::c_uint = 169;
pub static AV_CODEC_ID_AIC: ::libc::c_uint = 170;
pub static AV_CODEC_ID_ESCAPE130_DEPRECATED: ::libc::c_uint = 171;
pub static AV_CODEC_ID_G2M_DEPRECATED: ::libc::c_uint = 172;
pub static AV_CODEC_ID_WEBP_DEPRECATED: ::libc::c_uint = 173;
pub static AV_CODEC_ID_HNM4_VIDEO: ::libc::c_uint = 174;
pub static AV_CODEC_ID_HEVC_DEPRECATED: ::libc::c_uint = 175;
pub static AV_CODEC_ID_FIC: ::libc::c_uint = 176;
pub static AV_CODEC_ID_BRENDER_PIX: ::libc::c_uint = 1112557912;
pub static AV_CODEC_ID_Y41P: ::libc::c_uint = 1496592720;
pub static AV_CODEC_ID_ESCAPE130: ::libc::c_uint = 1160852272;
pub static AV_CODEC_ID_EXR: ::libc::c_uint = 809850962;
pub static AV_CODEC_ID_AVRP: ::libc::c_uint = 1096176208;
pub static AV_CODEC_ID_012V: ::libc::c_uint = 808530518;
pub static AV_CODEC_ID_G2M: ::libc::c_uint = 4665933;
pub static AV_CODEC_ID_AVUI: ::libc::c_uint = 1096176969;
pub static AV_CODEC_ID_AYUV: ::libc::c_uint = 1096373590;
pub static AV_CODEC_ID_TARGA_Y216: ::libc::c_uint = 1412575542;
pub static AV_CODEC_ID_V308: ::libc::c_uint = 1446195256;
pub static AV_CODEC_ID_V408: ::libc::c_uint = 1446260792;
pub static AV_CODEC_ID_YUV4: ::libc::c_uint = 1498764852;
pub static AV_CODEC_ID_SANM: ::libc::c_uint = 1396788813;
pub static AV_CODEC_ID_PAF_VIDEO: ::libc::c_uint = 1346455126;
pub static AV_CODEC_ID_AVRN: ::libc::c_uint = 1096176238;
pub static AV_CODEC_ID_CPIA: ::libc::c_uint = 1129335105;
pub static AV_CODEC_ID_XFACE: ::libc::c_uint = 1480999235;
pub static AV_CODEC_ID_SGIRLE: ::libc::c_uint = 1397180754;
pub static AV_CODEC_ID_MVC1: ::libc::c_uint = 1297498929;
pub static AV_CODEC_ID_MVC2: ::libc::c_uint = 1297498930;
pub static AV_CODEC_ID_SNOW: ::libc::c_uint = 1397641047;
pub static AV_CODEC_ID_WEBP: ::libc::c_uint = 1464156752;
pub static AV_CODEC_ID_SMVJPEG: ::libc::c_uint = 1397577290;
pub static AV_CODEC_ID_HEVC: ::libc::c_uint = 1211250229;
pub static AV_CODEC_ID_FIRST_AUDIO: ::libc::c_uint = 65536;
pub static AV_CODEC_ID_PCM_S16LE: ::libc::c_uint = 65536;
pub static AV_CODEC_ID_PCM_S16BE: ::libc::c_uint = 65537;
pub static AV_CODEC_ID_PCM_U16LE: ::libc::c_uint = 65538;
pub static AV_CODEC_ID_PCM_U16BE: ::libc::c_uint = 65539;
pub static AV_CODEC_ID_PCM_S8: ::libc::c_uint = 65540;
pub static AV_CODEC_ID_PCM_U8: ::libc::c_uint = 65541;
pub static AV_CODEC_ID_PCM_MULAW: ::libc::c_uint = 65542;
pub static AV_CODEC_ID_PCM_ALAW: ::libc::c_uint = 65543;
pub static AV_CODEC_ID_PCM_S32LE: ::libc::c_uint = 65544;
pub static AV_CODEC_ID_PCM_S32BE: ::libc::c_uint = 65545;
pub static AV_CODEC_ID_PCM_U32LE: ::libc::c_uint = 65546;
pub static AV_CODEC_ID_PCM_U32BE: ::libc::c_uint = 65547;
pub static AV_CODEC_ID_PCM_S24LE: ::libc::c_uint = 65548;
pub static AV_CODEC_ID_PCM_S24BE: ::libc::c_uint = 65549;
pub static AV_CODEC_ID_PCM_U24LE: ::libc::c_uint = 65550;
pub static AV_CODEC_ID_PCM_U24BE: ::libc::c_uint = 65551;
pub static AV_CODEC_ID_PCM_S24DAUD: ::libc::c_uint = 65552;
pub static AV_CODEC_ID_PCM_ZORK: ::libc::c_uint = 65553;
pub static AV_CODEC_ID_PCM_S16LE_PLANAR: ::libc::c_uint = 65554;
pub static AV_CODEC_ID_PCM_DVD: ::libc::c_uint = 65555;
pub static AV_CODEC_ID_PCM_F32BE: ::libc::c_uint = 65556;
pub static AV_CODEC_ID_PCM_F32LE: ::libc::c_uint = 65557;
pub static AV_CODEC_ID_PCM_F64BE: ::libc::c_uint = 65558;
pub static AV_CODEC_ID_PCM_F64LE: ::libc::c_uint = 65559;
pub static AV_CODEC_ID_PCM_BLURAY: ::libc::c_uint = 65560;
pub static AV_CODEC_ID_PCM_LXF: ::libc::c_uint = 65561;
pub static AV_CODEC_ID_S302M: ::libc::c_uint = 65562;
pub static AV_CODEC_ID_PCM_S8_PLANAR: ::libc::c_uint = 65563;
pub static AV_CODEC_ID_PCM_S24LE_PLANAR_DEPRECATED: ::libc::c_uint = 65564;
pub static AV_CODEC_ID_PCM_S32LE_PLANAR_DEPRECATED: ::libc::c_uint = 65565;
pub static AV_CODEC_ID_PCM_S24LE_PLANAR: ::libc::c_uint = 407917392;
pub static AV_CODEC_ID_PCM_S32LE_PLANAR: ::libc::c_uint = 542135120;
pub static AV_CODEC_ID_PCM_S16BE_PLANAR: ::libc::c_uint = 1347637264;
pub static AV_CODEC_ID_ADPCM_IMA_QT: ::libc::c_uint = 69632;
pub static AV_CODEC_ID_ADPCM_IMA_WAV: ::libc::c_uint = 69633;
pub static AV_CODEC_ID_ADPCM_IMA_DK3: ::libc::c_uint = 69634;
pub static AV_CODEC_ID_ADPCM_IMA_DK4: ::libc::c_uint = 69635;
pub static AV_CODEC_ID_ADPCM_IMA_WS: ::libc::c_uint = 69636;
pub static AV_CODEC_ID_ADPCM_IMA_SMJPEG: ::libc::c_uint = 69637;
pub static AV_CODEC_ID_ADPCM_MS: ::libc::c_uint = 69638;
pub static AV_CODEC_ID_ADPCM_4XM: ::libc::c_uint = 69639;
pub static AV_CODEC_ID_ADPCM_XA: ::libc::c_uint = 69640;
pub static AV_CODEC_ID_ADPCM_ADX: ::libc::c_uint = 69641;
pub static AV_CODEC_ID_ADPCM_EA: ::libc::c_uint = 69642;
pub static AV_CODEC_ID_ADPCM_G726: ::libc::c_uint = 69643;
pub static AV_CODEC_ID_ADPCM_CT: ::libc::c_uint = 69644;
pub static AV_CODEC_ID_ADPCM_SWF: ::libc::c_uint = 69645;
pub static AV_CODEC_ID_ADPCM_YAMAHA: ::libc::c_uint = 69646;
pub static AV_CODEC_ID_ADPCM_SBPRO_4: ::libc::c_uint = 69647;
pub static AV_CODEC_ID_ADPCM_SBPRO_3: ::libc::c_uint = 69648;
pub static AV_CODEC_ID_ADPCM_SBPRO_2: ::libc::c_uint = 69649;
pub static AV_CODEC_ID_ADPCM_THP: ::libc::c_uint = 69650;
pub static AV_CODEC_ID_ADPCM_IMA_AMV: ::libc::c_uint = 69651;
pub static AV_CODEC_ID_ADPCM_EA_R1: ::libc::c_uint = 69652;
pub static AV_CODEC_ID_ADPCM_EA_R3: ::libc::c_uint = 69653;
pub static AV_CODEC_ID_ADPCM_EA_R2: ::libc::c_uint = 69654;
pub static AV_CODEC_ID_ADPCM_IMA_EA_SEAD: ::libc::c_uint = 69655;
pub static AV_CODEC_ID_ADPCM_IMA_EA_EACS: ::libc::c_uint = 69656;
pub static AV_CODEC_ID_ADPCM_EA_XAS: ::libc::c_uint = 69657;
pub static AV_CODEC_ID_ADPCM_EA_MAXIS_XA: ::libc::c_uint = 69658;
pub static AV_CODEC_ID_ADPCM_IMA_ISS: ::libc::c_uint = 69659;
pub static AV_CODEC_ID_ADPCM_G722: ::libc::c_uint = 69660;
pub static AV_CODEC_ID_ADPCM_IMA_APC: ::libc::c_uint = 69661;
pub static AV_CODEC_ID_VIMA: ::libc::c_uint = 1447644481;
pub static AV_CODEC_ID_ADPCM_AFC: ::libc::c_uint = 1095123744;
pub static AV_CODEC_ID_ADPCM_IMA_OKI: ::libc::c_uint = 1330333984;
pub static AV_CODEC_ID_ADPCM_DTK: ::libc::c_uint = 1146374944;
pub static AV_CODEC_ID_ADPCM_IMA_RAD: ::libc::c_uint = 1380008992;
pub static AV_CODEC_ID_ADPCM_G726LE: ::libc::c_uint = 909260615;
pub static AV_CODEC_ID_AMR_NB: ::libc::c_uint = 73728;
pub static AV_CODEC_ID_AMR_WB: ::libc::c_uint = 73729;
pub static AV_CODEC_ID_RA_144: ::libc::c_uint = 77824;
pub static AV_CODEC_ID_RA_288: ::libc::c_uint = 77825;
pub static AV_CODEC_ID_ROQ_DPCM: ::libc::c_uint = 81920;
pub static AV_CODEC_ID_INTERPLAY_DPCM: ::libc::c_uint = 81921;
pub static AV_CODEC_ID_XAN_DPCM: ::libc::c_uint = 81922;
pub static AV_CODEC_ID_SOL_DPCM: ::libc::c_uint = 81923;
pub static AV_CODEC_ID_MP2: ::libc::c_uint = 86016;
pub static AV_CODEC_ID_MP3: ::libc::c_uint = 86017;
pub static AV_CODEC_ID_AAC: ::libc::c_uint = 86018;
pub static AV_CODEC_ID_AC3: ::libc::c_uint = 86019;
pub static AV_CODEC_ID_DTS: ::libc::c_uint = 86020;
pub static AV_CODEC_ID_VORBIS: ::libc::c_uint = 86021;
pub static AV_CODEC_ID_DVAUDIO: ::libc::c_uint = 86022;
pub static AV_CODEC_ID_WMAV1: ::libc::c_uint = 86023;
pub static AV_CODEC_ID_WMAV2: ::libc::c_uint = 86024;
pub static AV_CODEC_ID_MACE3: ::libc::c_uint = 86025;
pub static AV_CODEC_ID_MACE6: ::libc::c_uint = 86026;
pub static AV_CODEC_ID_VMDAUDIO: ::libc::c_uint = 86027;
pub static AV_CODEC_ID_FLAC: ::libc::c_uint = 86028;
pub static AV_CODEC_ID_MP3ADU: ::libc::c_uint = 86029;
pub static AV_CODEC_ID_MP3ON4: ::libc::c_uint = 86030;
pub static AV_CODEC_ID_SHORTEN: ::libc::c_uint = 86031;
pub static AV_CODEC_ID_ALAC: ::libc::c_uint = 86032;
pub static AV_CODEC_ID_WESTWOOD_SND1: ::libc::c_uint = 86033;
pub static AV_CODEC_ID_GSM: ::libc::c_uint = 86034;
pub static AV_CODEC_ID_QDM2: ::libc::c_uint = 86035;
pub static AV_CODEC_ID_COOK: ::libc::c_uint = 86036;
pub static AV_CODEC_ID_TRUESPEECH: ::libc::c_uint = 86037;
pub static AV_CODEC_ID_TTA: ::libc::c_uint = 86038;
pub static AV_CODEC_ID_SMACKAUDIO: ::libc::c_uint = 86039;
pub static AV_CODEC_ID_QCELP: ::libc::c_uint = 86040;
pub static AV_CODEC_ID_WAVPACK: ::libc::c_uint = 86041;
pub static AV_CODEC_ID_DSICINAUDIO: ::libc::c_uint = 86042;
pub static AV_CODEC_ID_IMC: ::libc::c_uint = 86043;
pub static AV_CODEC_ID_MUSEPACK7: ::libc::c_uint = 86044;
pub static AV_CODEC_ID_MLP: ::libc::c_uint = 86045;
pub static AV_CODEC_ID_GSM_MS: ::libc::c_uint = 86046;
pub static AV_CODEC_ID_ATRAC3: ::libc::c_uint = 86047;
pub static AV_CODEC_ID_VOXWARE: ::libc::c_uint = 86048;
pub static AV_CODEC_ID_APE: ::libc::c_uint = 86049;
pub static AV_CODEC_ID_NELLYMOSER: ::libc::c_uint = 86050;
pub static AV_CODEC_ID_MUSEPACK8: ::libc::c_uint = 86051;
pub static AV_CODEC_ID_SPEEX: ::libc::c_uint = 86052;
pub static AV_CODEC_ID_WMAVOICE: ::libc::c_uint = 86053;
pub static AV_CODEC_ID_WMAPRO: ::libc::c_uint = 86054;
pub static AV_CODEC_ID_WMALOSSLESS: ::libc::c_uint = 86055;
pub static AV_CODEC_ID_ATRAC3P: ::libc::c_uint = 86056;
pub static AV_CODEC_ID_EAC3: ::libc::c_uint = 86057;
pub static AV_CODEC_ID_SIPR: ::libc::c_uint = 86058;
pub static AV_CODEC_ID_MP1: ::libc::c_uint = 86059;
pub static AV_CODEC_ID_TWINVQ: ::libc::c_uint = 86060;
pub static AV_CODEC_ID_TRUEHD: ::libc::c_uint = 86061;
pub static AV_CODEC_ID_MP4ALS: ::libc::c_uint = 86062;
pub static AV_CODEC_ID_ATRAC1: ::libc::c_uint = 86063;
pub static AV_CODEC_ID_BINKAUDIO_RDFT: ::libc::c_uint = 86064;
pub static AV_CODEC_ID_BINKAUDIO_DCT: ::libc::c_uint = 86065;
pub static AV_CODEC_ID_AAC_LATM: ::libc::c_uint = 86066;
pub static AV_CODEC_ID_QDMC: ::libc::c_uint = 86067;
pub static AV_CODEC_ID_CELT: ::libc::c_uint = 86068;
pub static AV_CODEC_ID_G723_1: ::libc::c_uint = 86069;
pub static AV_CODEC_ID_G729: ::libc::c_uint = 86070;
pub static AV_CODEC_ID_8SVX_EXP: ::libc::c_uint = 86071;
pub static AV_CODEC_ID_8SVX_FIB: ::libc::c_uint = 86072;
pub static AV_CODEC_ID_BMV_AUDIO: ::libc::c_uint = 86073;
pub static AV_CODEC_ID_RALF: ::libc::c_uint = 86074;
pub static AV_CODEC_ID_IAC: ::libc::c_uint = 86075;
pub static AV_CODEC_ID_ILBC: ::libc::c_uint = 86076;
pub static AV_CODEC_ID_OPUS_DEPRECATED: ::libc::c_uint = 86077;
pub static AV_CODEC_ID_COMFORT_NOISE: ::libc::c_uint = 86078;
pub static AV_CODEC_ID_TAK_DEPRECATED: ::libc::c_uint = 86079;
pub static AV_CODEC_ID_METASOUND: ::libc::c_uint = 86080;
pub static AV_CODEC_ID_FFWAVESYNTH: ::libc::c_uint = 1179014995;
pub static AV_CODEC_ID_SONIC: ::libc::c_uint = 1397706307;
pub static AV_CODEC_ID_SONIC_LS: ::libc::c_uint = 1397706316;
pub static AV_CODEC_ID_PAF_AUDIO: ::libc::c_uint = 1346455105;
pub static AV_CODEC_ID_OPUS: ::libc::c_uint = 1330664787;
pub static AV_CODEC_ID_TAK: ::libc::c_uint = 1950507339;
pub static AV_CODEC_ID_EVRC: ::libc::c_uint = 1936029283;
pub static AV_CODEC_ID_SMV: ::libc::c_uint = 1936944502;
pub static AV_CODEC_ID_FIRST_SUBTITLE: ::libc::c_uint = 94208;
pub static AV_CODEC_ID_DVD_SUBTITLE: ::libc::c_uint = 94208;
pub static AV_CODEC_ID_DVB_SUBTITLE: ::libc::c_uint = 94209;
pub static AV_CODEC_ID_TEXT: ::libc::c_uint = 94210;
pub static AV_CODEC_ID_XSUB: ::libc::c_uint = 94211;
pub static AV_CODEC_ID_SSA: ::libc::c_uint = 94212;
pub static AV_CODEC_ID_MOV_TEXT: ::libc::c_uint = 94213;
pub static AV_CODEC_ID_HDMV_PGS_SUBTITLE: ::libc::c_uint = 94214;
pub static AV_CODEC_ID_DVB_TELETEXT: ::libc::c_uint = 94215;
pub static AV_CODEC_ID_SRT: ::libc::c_uint = 94216;
pub static AV_CODEC_ID_MICRODVD: ::libc::c_uint = 1833195076;
pub static AV_CODEC_ID_EIA_608: ::libc::c_uint = 1664495672;
pub static AV_CODEC_ID_JACOSUB: ::libc::c_uint = 1246975298;
pub static AV_CODEC_ID_SAMI: ::libc::c_uint = 1396788553;
pub static AV_CODEC_ID_REALTEXT: ::libc::c_uint = 1381259348;
pub static AV_CODEC_ID_SUBVIEWER1: ::libc::c_uint = 1398953521;
pub static AV_CODEC_ID_SUBVIEWER: ::libc::c_uint = 1400201814;
pub static AV_CODEC_ID_SUBRIP: ::libc::c_uint = 1397909872;
pub static AV_CODEC_ID_WEBVTT: ::libc::c_uint = 1465275476;
pub static AV_CODEC_ID_MPL2: ::libc::c_uint = 1297108018;
pub static AV_CODEC_ID_VPLAYER: ::libc::c_uint = 1448111218;
pub static AV_CODEC_ID_PJS: ::libc::c_uint = 1349012051;
pub static AV_CODEC_ID_ASS: ::libc::c_uint = 1095979808;
pub static AV_CODEC_ID_FIRST_UNKNOWN: ::libc::c_uint = 98304;
pub static AV_CODEC_ID_TTF: ::libc::c_uint = 98304;
pub static AV_CODEC_ID_BINTEXT: ::libc::c_uint = 1112823892;
pub static AV_CODEC_ID_XBIN: ::libc::c_uint = 1480739150;
pub static AV_CODEC_ID_IDF: ::libc::c_uint = 4801606;
pub static AV_CODEC_ID_OTF: ::libc::c_uint = 5198918;
pub static AV_CODEC_ID_SMPTE_KLV: ::libc::c_uint = 1263294017;
pub static AV_CODEC_ID_DVD_NAV: ::libc::c_uint = 1145979222;
pub static AV_CODEC_ID_TIMED_ID3: ::libc::c_uint = 1414087731;
pub static AV_CODEC_ID_PROBE: ::libc::c_uint = 102400;
pub static AV_CODEC_ID_MPEG2TS: ::libc::c_uint = 131072;
pub static AV_CODEC_ID_MPEG4SYSTEMS: ::libc::c_uint = 131073;
pub static AV_CODEC_ID_FFMETADATA: ::libc::c_uint = 135168;
pub static CODEC_ID_NONE: ::libc::c_uint = 0;
pub static CODEC_ID_MPEG1VIDEO: ::libc::c_uint = 1;
pub static CODEC_ID_MPEG2VIDEO: ::libc::c_uint = 2;
pub static CODEC_ID_MPEG2VIDEO_XVMC: ::libc::c_uint = 3;
pub static CODEC_ID_H261: ::libc::c_uint = 4;
pub static CODEC_ID_H263: ::libc::c_uint = 5;
pub static CODEC_ID_RV10: ::libc::c_uint = 6;
pub static CODEC_ID_RV20: ::libc::c_uint = 7;
pub static CODEC_ID_MJPEG: ::libc::c_uint = 8;
pub static CODEC_ID_MJPEGB: ::libc::c_uint = 9;
pub static CODEC_ID_LJPEG: ::libc::c_uint = 10;
pub static CODEC_ID_SP5X: ::libc::c_uint = 11;
pub static CODEC_ID_JPEGLS: ::libc::c_uint = 12;
pub static CODEC_ID_MPEG4: ::libc::c_uint = 13;
pub static CODEC_ID_RAWVIDEO: ::libc::c_uint = 14;
pub static CODEC_ID_MSMPEG4V1: ::libc::c_uint = 15;
pub static CODEC_ID_MSMPEG4V2: ::libc::c_uint = 16;
pub static CODEC_ID_MSMPEG4V3: ::libc::c_uint = 17;
pub static CODEC_ID_WMV1: ::libc::c_uint = 18;
pub static CODEC_ID_WMV2: ::libc::c_uint = 19;
pub static CODEC_ID_H263P: ::libc::c_uint = 20;
pub static CODEC_ID_H263I: ::libc::c_uint = 21;
pub static CODEC_ID_FLV1: ::libc::c_uint = 22;
pub static CODEC_ID_SVQ1: ::libc::c_uint = 23;
pub static CODEC_ID_SVQ3: ::libc::c_uint = 24;
pub static CODEC_ID_DVVIDEO: ::libc::c_uint = 25;
pub static CODEC_ID_HUFFYUV: ::libc::c_uint = 26;
pub static CODEC_ID_CYUV: ::libc::c_uint = 27;
pub static CODEC_ID_H264: ::libc::c_uint = 28;
pub static CODEC_ID_INDEO3: ::libc::c_uint = 29;
pub static CODEC_ID_VP3: ::libc::c_uint = 30;
pub static CODEC_ID_THEORA: ::libc::c_uint = 31;
pub static CODEC_ID_ASV1: ::libc::c_uint = 32;
pub static CODEC_ID_ASV2: ::libc::c_uint = 33;
pub static CODEC_ID_FFV1: ::libc::c_uint = 34;
pub static CODEC_ID_4XM: ::libc::c_uint = 35;
pub static CODEC_ID_VCR1: ::libc::c_uint = 36;
pub static CODEC_ID_CLJR: ::libc::c_uint = 37;
pub static CODEC_ID_MDEC: ::libc::c_uint = 38;
pub static CODEC_ID_ROQ: ::libc::c_uint = 39;
pub static CODEC_ID_INTERPLAY_VIDEO: ::libc::c_uint = 40;
pub static CODEC_ID_XAN_WC3: ::libc::c_uint = 41;
pub static CODEC_ID_XAN_WC4: ::libc::c_uint = 42;
pub static CODEC_ID_RPZA: ::libc::c_uint = 43;
pub static CODEC_ID_CINEPAK: ::libc::c_uint = 44;
pub static CODEC_ID_WS_VQA: ::libc::c_uint = 45;
pub static CODEC_ID_MSRLE: ::libc::c_uint = 46;
pub static CODEC_ID_MSVIDEO1: ::libc::c_uint = 47;
pub static CODEC_ID_IDCIN: ::libc::c_uint = 48;
pub static CODEC_ID_8BPS: ::libc::c_uint = 49;
pub static CODEC_ID_SMC: ::libc::c_uint = 50;
pub static CODEC_ID_FLIC: ::libc::c_uint = 51;
pub static CODEC_ID_TRUEMOTION1: ::libc::c_uint = 52;
pub static CODEC_ID_VMDVIDEO: ::libc::c_uint = 53;
pub static CODEC_ID_MSZH: ::libc::c_uint = 54;
pub static CODEC_ID_ZLIB: ::libc::c_uint = 55;
pub static CODEC_ID_QTRLE: ::libc::c_uint = 56;
pub static CODEC_ID_TSCC: ::libc::c_uint = 57;
pub static CODEC_ID_ULTI: ::libc::c_uint = 58;
pub static CODEC_ID_QDRAW: ::libc::c_uint = 59;
pub static CODEC_ID_VIXL: ::libc::c_uint = 60;
pub static CODEC_ID_QPEG: ::libc::c_uint = 61;
pub static CODEC_ID_PNG: ::libc::c_uint = 62;
pub static CODEC_ID_PPM: ::libc::c_uint = 63;
pub static CODEC_ID_PBM: ::libc::c_uint = 64;
pub static CODEC_ID_PGM: ::libc::c_uint = 65;
pub static CODEC_ID_PGMYUV: ::libc::c_uint = 66;
pub static CODEC_ID_PAM: ::libc::c_uint = 67;
pub static CODEC_ID_FFVHUFF: ::libc::c_uint = 68;
pub static CODEC_ID_RV30: ::libc::c_uint = 69;
pub static CODEC_ID_RV40: ::libc::c_uint = 70;
pub static CODEC_ID_VC1: ::libc::c_uint = 71;
pub static CODEC_ID_WMV3: ::libc::c_uint = 72;
pub static CODEC_ID_LOCO: ::libc::c_uint = 73;
pub static CODEC_ID_WNV1: ::libc::c_uint = 74;
pub static CODEC_ID_AASC: ::libc::c_uint = 75;
pub static CODEC_ID_INDEO2: ::libc::c_uint = 76;
pub static CODEC_ID_FRAPS: ::libc::c_uint = 77;
pub static CODEC_ID_TRUEMOTION2: ::libc::c_uint = 78;
pub static CODEC_ID_BMP: ::libc::c_uint = 79;
pub static CODEC_ID_CSCD: ::libc::c_uint = 80;
pub static CODEC_ID_MMVIDEO: ::libc::c_uint = 81;
pub static CODEC_ID_ZMBV: ::libc::c_uint = 82;
pub static CODEC_ID_AVS: ::libc::c_uint = 83;
pub static CODEC_ID_SMACKVIDEO: ::libc::c_uint = 84;
pub static CODEC_ID_NUV: ::libc::c_uint = 85;
pub static CODEC_ID_KMVC: ::libc::c_uint = 86;
pub static CODEC_ID_FLASHSV: ::libc::c_uint = 87;
pub static CODEC_ID_CAVS: ::libc::c_uint = 88;
pub static CODEC_ID_JPEG2000: ::libc::c_uint = 89;
pub static CODEC_ID_VMNC: ::libc::c_uint = 90;
pub static CODEC_ID_VP5: ::libc::c_uint = 91;
pub static CODEC_ID_VP6: ::libc::c_uint = 92;
pub static CODEC_ID_VP6F: ::libc::c_uint = 93;
pub static CODEC_ID_TARGA: ::libc::c_uint = 94;
pub static CODEC_ID_DSICINVIDEO: ::libc::c_uint = 95;
pub static CODEC_ID_TIERTEXSEQVIDEO: ::libc::c_uint = 96;
pub static CODEC_ID_TIFF: ::libc::c_uint = 97;
pub static CODEC_ID_GIF: ::libc::c_uint = 98;
pub static CODEC_ID_DXA: ::libc::c_uint = 99;
pub static CODEC_ID_DNXHD: ::libc::c_uint = 100;
pub static CODEC_ID_THP: ::libc::c_uint = 101;
pub static CODEC_ID_SGI: ::libc::c_uint = 102;
pub static CODEC_ID_C93: ::libc::c_uint = 103;
pub static CODEC_ID_BETHSOFTVID: ::libc::c_uint = 104;
pub static CODEC_ID_PTX: ::libc::c_uint = 105;
pub static CODEC_ID_TXD: ::libc::c_uint = 106;
pub static CODEC_ID_VP6A: ::libc::c_uint = 107;
pub static CODEC_ID_AMV: ::libc::c_uint = 108;
pub static CODEC_ID_VB: ::libc::c_uint = 109;
pub static CODEC_ID_PCX: ::libc::c_uint = 110;
pub static CODEC_ID_SUNRAST: ::libc::c_uint = 111;
pub static CODEC_ID_INDEO4: ::libc::c_uint = 112;
pub static CODEC_ID_INDEO5: ::libc::c_uint = 113;
pub static CODEC_ID_MIMIC: ::libc::c_uint = 114;
pub static CODEC_ID_RL2: ::libc::c_uint = 115;
pub static CODEC_ID_ESCAPE124: ::libc::c_uint = 116;
pub static CODEC_ID_DIRAC: ::libc::c_uint = 117;
pub static CODEC_ID_BFI: ::libc::c_uint = 118;
pub static CODEC_ID_CMV: ::libc::c_uint = 119;
pub static CODEC_ID_MOTIONPIXELS: ::libc::c_uint = 120;
pub static CODEC_ID_TGV: ::libc::c_uint = 121;
pub static CODEC_ID_TGQ: ::libc::c_uint = 122;
pub static CODEC_ID_TQI: ::libc::c_uint = 123;
pub static CODEC_ID_AURA: ::libc::c_uint = 124;
pub static CODEC_ID_AURA2: ::libc::c_uint = 125;
pub static CODEC_ID_V210X: ::libc::c_uint = 126;
pub static CODEC_ID_TMV: ::libc::c_uint = 127;
pub static CODEC_ID_V210: ::libc::c_uint = 128;
pub static CODEC_ID_DPX: ::libc::c_uint = 129;
pub static CODEC_ID_MAD: ::libc::c_uint = 130;
pub static CODEC_ID_FRWU: ::libc::c_uint = 131;
pub static CODEC_ID_FLASHSV2: ::libc::c_uint = 132;
pub static CODEC_ID_CDGRAPHICS: ::libc::c_uint = 133;
pub static CODEC_ID_R210: ::libc::c_uint = 134;
pub static CODEC_ID_ANM: ::libc::c_uint = 135;
pub static CODEC_ID_BINKVIDEO: ::libc::c_uint = 136;
pub static CODEC_ID_IFF_ILBM: ::libc::c_uint = 137;
pub static CODEC_ID_IFF_BYTERUN1: ::libc::c_uint = 138;
pub static CODEC_ID_KGV1: ::libc::c_uint = 139;
pub static CODEC_ID_YOP: ::libc::c_uint = 140;
pub static CODEC_ID_VP8: ::libc::c_uint = 141;
pub static CODEC_ID_PICTOR: ::libc::c_uint = 142;
pub static CODEC_ID_ANSI: ::libc::c_uint = 143;
pub static CODEC_ID_A64_MULTI: ::libc::c_uint = 144;
pub static CODEC_ID_A64_MULTI5: ::libc::c_uint = 145;
pub static CODEC_ID_R10K: ::libc::c_uint = 146;
pub static CODEC_ID_MXPEG: ::libc::c_uint = 147;
pub static CODEC_ID_LAGARITH: ::libc::c_uint = 148;
pub static CODEC_ID_PRORES: ::libc::c_uint = 149;
pub static CODEC_ID_JV: ::libc::c_uint = 150;
pub static CODEC_ID_DFA: ::libc::c_uint = 151;
pub static CODEC_ID_WMV3IMAGE: ::libc::c_uint = 152;
pub static CODEC_ID_VC1IMAGE: ::libc::c_uint = 153;
pub static CODEC_ID_UTVIDEO: ::libc::c_uint = 154;
pub static CODEC_ID_BMV_VIDEO: ::libc::c_uint = 155;
pub static CODEC_ID_VBLE: ::libc::c_uint = 156;
pub static CODEC_ID_DXTORY: ::libc::c_uint = 157;
pub static CODEC_ID_V410: ::libc::c_uint = 158;
pub static CODEC_ID_XWD: ::libc::c_uint = 159;
pub static CODEC_ID_CDXL: ::libc::c_uint = 160;
pub static CODEC_ID_XBM: ::libc::c_uint = 161;
pub static CODEC_ID_ZEROCODEC: ::libc::c_uint = 162;
pub static CODEC_ID_MSS1: ::libc::c_uint = 163;
pub static CODEC_ID_MSA1: ::libc::c_uint = 164;
pub static CODEC_ID_TSCC2: ::libc::c_uint = 165;
pub static CODEC_ID_MTS2: ::libc::c_uint = 166;
pub static CODEC_ID_CLLC: ::libc::c_uint = 167;
pub static CODEC_ID_Y41P: ::libc::c_uint = 1496592720;
pub static CODEC_ID_ESCAPE130: ::libc::c_uint = 1160852272;
pub static CODEC_ID_EXR: ::libc::c_uint = 809850962;
pub static CODEC_ID_AVRP: ::libc::c_uint = 1096176208;
pub static CODEC_ID_G2M: ::libc::c_uint = 4665933;
pub static CODEC_ID_AVUI: ::libc::c_uint = 1096176969;
pub static CODEC_ID_AYUV: ::libc::c_uint = 1096373590;
pub static CODEC_ID_V308: ::libc::c_uint = 1446195256;
pub static CODEC_ID_V408: ::libc::c_uint = 1446260792;
pub static CODEC_ID_YUV4: ::libc::c_uint = 1498764852;
pub static CODEC_ID_SANM: ::libc::c_uint = 1396788813;
pub static CODEC_ID_PAF_VIDEO: ::libc::c_uint = 1346455126;
pub static CODEC_ID_SNOW: ::libc::c_uint = 1397641047;
pub static CODEC_ID_FIRST_AUDIO: ::libc::c_uint = 65536;
pub static CODEC_ID_PCM_S16LE: ::libc::c_uint = 65536;
pub static CODEC_ID_PCM_S16BE: ::libc::c_uint = 65537;
pub static CODEC_ID_PCM_U16LE: ::libc::c_uint = 65538;
pub static CODEC_ID_PCM_U16BE: ::libc::c_uint = 65539;
pub static CODEC_ID_PCM_S8: ::libc::c_uint = 65540;
pub static CODEC_ID_PCM_U8: ::libc::c_uint = 65541;
pub static CODEC_ID_PCM_MULAW: ::libc::c_uint = 65542;
pub static CODEC_ID_PCM_ALAW: ::libc::c_uint = 65543;
pub static CODEC_ID_PCM_S32LE: ::libc::c_uint = 65544;
pub static CODEC_ID_PCM_S32BE: ::libc::c_uint = 65545;
pub static CODEC_ID_PCM_U32LE: ::libc::c_uint = 65546;
pub static CODEC_ID_PCM_U32BE: ::libc::c_uint = 65547;
pub static CODEC_ID_PCM_S24LE: ::libc::c_uint = 65548;
pub static CODEC_ID_PCM_S24BE: ::libc::c_uint = 65549;
pub static CODEC_ID_PCM_U24LE: ::libc::c_uint = 65550;
pub static CODEC_ID_PCM_U24BE: ::libc::c_uint = 65551;
pub static CODEC_ID_PCM_S24DAUD: ::libc::c_uint = 65552;
pub static CODEC_ID_PCM_ZORK: ::libc::c_uint = 65553;
pub static CODEC_ID_PCM_S16LE_PLANAR: ::libc::c_uint = 65554;
pub static CODEC_ID_PCM_DVD: ::libc::c_uint = 65555;
pub static CODEC_ID_PCM_F32BE: ::libc::c_uint = 65556;
pub static CODEC_ID_PCM_F32LE: ::libc::c_uint = 65557;
pub static CODEC_ID_PCM_F64BE: ::libc::c_uint = 65558;
pub static CODEC_ID_PCM_F64LE: ::libc::c_uint = 65559;
pub static CODEC_ID_PCM_BLURAY: ::libc::c_uint = 65560;
pub static CODEC_ID_PCM_LXF: ::libc::c_uint = 65561;
pub static CODEC_ID_S302M: ::libc::c_uint = 65562;
pub static CODEC_ID_PCM_S8_PLANAR: ::libc::c_uint = 65563;
pub static CODEC_ID_ADPCM_IMA_QT: ::libc::c_uint = 69632;
pub static CODEC_ID_ADPCM_IMA_WAV: ::libc::c_uint = 69633;
pub static CODEC_ID_ADPCM_IMA_DK3: ::libc::c_uint = 69634;
pub static CODEC_ID_ADPCM_IMA_DK4: ::libc::c_uint = 69635;
pub static CODEC_ID_ADPCM_IMA_WS: ::libc::c_uint = 69636;
pub static CODEC_ID_ADPCM_IMA_SMJPEG: ::libc::c_uint = 69637;
pub static CODEC_ID_ADPCM_MS: ::libc::c_uint = 69638;
pub static CODEC_ID_ADPCM_4XM: ::libc::c_uint = 69639;
pub static CODEC_ID_ADPCM_XA: ::libc::c_uint = 69640;
pub static CODEC_ID_ADPCM_ADX: ::libc::c_uint = 69641;
pub static CODEC_ID_ADPCM_EA: ::libc::c_uint = 69642;
pub static CODEC_ID_ADPCM_G726: ::libc::c_uint = 69643;
pub static CODEC_ID_ADPCM_CT: ::libc::c_uint = 69644;
pub static CODEC_ID_ADPCM_SWF: ::libc::c_uint = 69645;
pub static CODEC_ID_ADPCM_YAMAHA: ::libc::c_uint = 69646;
pub static CODEC_ID_ADPCM_SBPRO_4: ::libc::c_uint = 69647;
pub static CODEC_ID_ADPCM_SBPRO_3: ::libc::c_uint = 69648;
pub static CODEC_ID_ADPCM_SBPRO_2: ::libc::c_uint = 69649;
pub static CODEC_ID_ADPCM_THP: ::libc::c_uint = 69650;
pub static CODEC_ID_ADPCM_IMA_AMV: ::libc::c_uint = 69651;
pub static CODEC_ID_ADPCM_EA_R1: ::libc::c_uint = 69652;
pub static CODEC_ID_ADPCM_EA_R3: ::libc::c_uint = 69653;
pub static CODEC_ID_ADPCM_EA_R2: ::libc::c_uint = 69654;
pub static CODEC_ID_ADPCM_IMA_EA_SEAD: ::libc::c_uint = 69655;
pub static CODEC_ID_ADPCM_IMA_EA_EACS: ::libc::c_uint = 69656;
pub static CODEC_ID_ADPCM_EA_XAS: ::libc::c_uint = 69657;
pub static CODEC_ID_ADPCM_EA_MAXIS_XA: ::libc::c_uint = 69658;
pub static CODEC_ID_ADPCM_IMA_ISS: ::libc::c_uint = 69659;
pub static CODEC_ID_ADPCM_G722: ::libc::c_uint = 69660;
pub static CODEC_ID_ADPCM_IMA_APC: ::libc::c_uint = 69661;
pub static CODEC_ID_VIMA: ::libc::c_uint = 1447644481;
pub static CODEC_ID_AMR_NB: ::libc::c_uint = 73728;
pub static CODEC_ID_AMR_WB: ::libc::c_uint = 73729;
pub static CODEC_ID_RA_144: ::libc::c_uint = 77824;
pub static CODEC_ID_RA_288: ::libc::c_uint = 77825;
pub static CODEC_ID_ROQ_DPCM: ::libc::c_uint = 81920;
pub static CODEC_ID_INTERPLAY_DPCM: ::libc::c_uint = 81921;
pub static CODEC_ID_XAN_DPCM: ::libc::c_uint = 81922;
pub static CODEC_ID_SOL_DPCM: ::libc::c_uint = 81923;
pub static CODEC_ID_MP2: ::libc::c_uint = 86016;
pub static CODEC_ID_MP3: ::libc::c_uint = 86017;
pub static CODEC_ID_AAC: ::libc::c_uint = 86018;
pub static CODEC_ID_AC3: ::libc::c_uint = 86019;
pub static CODEC_ID_DTS: ::libc::c_uint = 86020;
pub static CODEC_ID_VORBIS: ::libc::c_uint = 86021;
pub static CODEC_ID_DVAUDIO: ::libc::c_uint = 86022;
pub static CODEC_ID_WMAV1: ::libc::c_uint = 86023;
pub static CODEC_ID_WMAV2: ::libc::c_uint = 86024;
pub static CODEC_ID_MACE3: ::libc::c_uint = 86025;
pub static CODEC_ID_MACE6: ::libc::c_uint = 86026;
pub static CODEC_ID_VMDAUDIO: ::libc::c_uint = 86027;
pub static CODEC_ID_FLAC: ::libc::c_uint = 86028;
pub static CODEC_ID_MP3ADU: ::libc::c_uint = 86029;
pub static CODEC_ID_MP3ON4: ::libc::c_uint = 86030;
pub static CODEC_ID_SHORTEN: ::libc::c_uint = 86031;
pub static CODEC_ID_ALAC: ::libc::c_uint = 86032;
pub static CODEC_ID_WESTWOOD_SND1: ::libc::c_uint = 86033;
pub static CODEC_ID_GSM: ::libc::c_uint = 86034;
pub static CODEC_ID_QDM2: ::libc::c_uint = 86035;
pub static CODEC_ID_COOK: ::libc::c_uint = 86036;
pub static CODEC_ID_TRUESPEECH: ::libc::c_uint = 86037;
pub static CODEC_ID_TTA: ::libc::c_uint = 86038;
pub static CODEC_ID_SMACKAUDIO: ::libc::c_uint = 86039;
pub static CODEC_ID_QCELP: ::libc::c_uint = 86040;
pub static CODEC_ID_WAVPACK: ::libc::c_uint = 86041;
pub static CODEC_ID_DSICINAUDIO: ::libc::c_uint = 86042;
pub static CODEC_ID_IMC: ::libc::c_uint = 86043;
pub static CODEC_ID_MUSEPACK7: ::libc::c_uint = 86044;
pub static CODEC_ID_MLP: ::libc::c_uint = 86045;
pub static CODEC_ID_GSM_MS: ::libc::c_uint = 86046;
pub static CODEC_ID_ATRAC3: ::libc::c_uint = 86047;
pub static CODEC_ID_VOXWARE: ::libc::c_uint = 86048;
pub static CODEC_ID_APE: ::libc::c_uint = 86049;
pub static CODEC_ID_NELLYMOSER: ::libc::c_uint = 86050;
pub static CODEC_ID_MUSEPACK8: ::libc::c_uint = 86051;
pub static CODEC_ID_SPEEX: ::libc::c_uint = 86052;
pub static CODEC_ID_WMAVOICE: ::libc::c_uint = 86053;
pub static CODEC_ID_WMAPRO: ::libc::c_uint = 86054;
pub static CODEC_ID_WMALOSSLESS: ::libc::c_uint = 86055;
pub static CODEC_ID_ATRAC3P: ::libc::c_uint = 86056;
pub static CODEC_ID_EAC3: ::libc::c_uint = 86057;
pub static CODEC_ID_SIPR: ::libc::c_uint = 86058;
pub static CODEC_ID_MP1: ::libc::c_uint = 86059;
pub static CODEC_ID_TWINVQ: ::libc::c_uint = 86060;
pub static CODEC_ID_TRUEHD: ::libc::c_uint = 86061;
pub static CODEC_ID_MP4ALS: ::libc::c_uint = 86062;
pub static CODEC_ID_ATRAC1: ::libc::c_uint = 86063;
pub static CODEC_ID_BINKAUDIO_RDFT: ::libc::c_uint = 86064;
pub static CODEC_ID_BINKAUDIO_DCT: ::libc::c_uint = 86065;
pub static CODEC_ID_AAC_LATM: ::libc::c_uint = 86066;
pub static CODEC_ID_QDMC: ::libc::c_uint = 86067;
pub static CODEC_ID_CELT: ::libc::c_uint = 86068;
pub static CODEC_ID_G723_1: ::libc::c_uint = 86069;
pub static CODEC_ID_G729: ::libc::c_uint = 86070;
pub static CODEC_ID_8SVX_EXP: ::libc::c_uint = 86071;
pub static CODEC_ID_8SVX_FIB: ::libc::c_uint = 86072;
pub static CODEC_ID_BMV_AUDIO: ::libc::c_uint = 86073;
pub static CODEC_ID_RALF: ::libc::c_uint = 86074;
pub static CODEC_ID_IAC: ::libc::c_uint = 86075;
pub static CODEC_ID_ILBC: ::libc::c_uint = 86076;
pub static CODEC_ID_FFWAVESYNTH: ::libc::c_uint = 1179014995;
pub static CODEC_ID_SONIC: ::libc::c_uint = 1397706307;
pub static CODEC_ID_SONIC_LS: ::libc::c_uint = 1397706316;
pub static CODEC_ID_PAF_AUDIO: ::libc::c_uint = 1346455105;
pub static CODEC_ID_OPUS: ::libc::c_uint = 1330664787;
pub static CODEC_ID_FIRST_SUBTITLE: ::libc::c_uint = 94208;
pub static CODEC_ID_DVD_SUBTITLE: ::libc::c_uint = 94208;
pub static CODEC_ID_DVB_SUBTITLE: ::libc::c_uint = 94209;
pub static CODEC_ID_TEXT: ::libc::c_uint = 94210;
pub static CODEC_ID_XSUB: ::libc::c_uint = 94211;
pub static CODEC_ID_SSA: ::libc::c_uint = 94212;
pub static CODEC_ID_MOV_TEXT: ::libc::c_uint = 94213;
pub static CODEC_ID_HDMV_PGS_SUBTITLE: ::libc::c_uint = 94214;
pub static CODEC_ID_DVB_TELETEXT: ::libc::c_uint = 94215;
pub static CODEC_ID_SRT: ::libc::c_uint = 94216;
pub static CODEC_ID_MICRODVD: ::libc::c_uint = 1833195076;
pub static CODEC_ID_EIA_608: ::libc::c_uint = 1664495672;
pub static CODEC_ID_JACOSUB: ::libc::c_uint = 1246975298;
pub static CODEC_ID_SAMI: ::libc::c_uint = 1396788553;
pub static CODEC_ID_REALTEXT: ::libc::c_uint = 1381259348;
pub static CODEC_ID_SUBVIEWER: ::libc::c_uint = 1400201814;
pub static CODEC_ID_FIRST_UNKNOWN: ::libc::c_uint = 98304;
pub static CODEC_ID_TTF: ::libc::c_uint = 98304;
pub static CODEC_ID_BINTEXT: ::libc::c_uint = 1112823892;
pub static CODEC_ID_XBIN: ::libc::c_uint = 1480739150;
pub static CODEC_ID_IDF: ::libc::c_uint = 4801606;
pub static CODEC_ID_OTF: ::libc::c_uint = 5198918;
pub static CODEC_ID_PROBE: ::libc::c_uint = 102400;
pub static CODEC_ID_MPEG2TS: ::libc::c_uint = 131072;
pub static CODEC_ID_MPEG4SYSTEMS: ::libc::c_uint = 131073;
pub static CODEC_ID_FFMETADATA: ::libc::c_uint = 135168;
#[repr(C)]
pub struct Struct_AVCodecDescriptor {
    pub id: Enum_AVCodecID,
    pub _type: avutil::Enum_AVMediaType,
    pub name: *const ::libc::c_char,
    pub long_name: *const ::libc::c_char,
    pub props: ::libc::c_int,
}
pub type AVCodecDescriptor = Struct_AVCodecDescriptor;
pub type Enum_Motion_Est_ID = ::libc::c_uint;
pub static ME_ZERO: ::libc::c_uint = 1;
pub static ME_FULL: ::libc::c_uint = 2;
pub static ME_LOG: ::libc::c_uint = 3;
pub static ME_PHODS: ::libc::c_uint = 4;
pub static ME_EPZS: ::libc::c_uint = 5;
pub static ME_X1: ::libc::c_uint = 6;
pub static ME_HEX: ::libc::c_uint = 7;
pub static ME_UMH: ::libc::c_uint = 8;
pub static ME_TESA: ::libc::c_uint = 9;
pub static ME_ITER: ::libc::c_uint = 50;
pub type Enum_AVDiscard = ::libc::c_int;
pub static AVDISCARD_NONE: ::libc::c_int = -16;
pub static AVDISCARD_DEFAULT: ::libc::c_int = 0;
pub static AVDISCARD_NONREF: ::libc::c_int = 8;
pub static AVDISCARD_BIDIR: ::libc::c_int = 16;
pub static AVDISCARD_NONKEY: ::libc::c_int = 32;
pub static AVDISCARD_ALL: ::libc::c_int = 48;
pub type Enum_AVColorPrimaries = ::libc::c_uint;
pub static AVCOL_PRI_BT709: ::libc::c_uint = 1;
pub static AVCOL_PRI_UNSPECIFIED: ::libc::c_uint = 2;
pub static AVCOL_PRI_BT470M: ::libc::c_uint = 4;
pub static AVCOL_PRI_BT470BG: ::libc::c_uint = 5;
pub static AVCOL_PRI_SMPTE170M: ::libc::c_uint = 6;
pub static AVCOL_PRI_SMPTE240M: ::libc::c_uint = 7;
pub static AVCOL_PRI_FILM: ::libc::c_uint = 8;
pub static AVCOL_PRI_BT2020: ::libc::c_uint = 9;
pub static AVCOL_PRI_NB: ::libc::c_uint = 10;
pub type Enum_AVColorTransferCharacteristic = ::libc::c_uint;
pub static AVCOL_TRC_BT709: ::libc::c_uint = 1;
pub static AVCOL_TRC_UNSPECIFIED: ::libc::c_uint = 2;
pub static AVCOL_TRC_GAMMA22: ::libc::c_uint = 4;
pub static AVCOL_TRC_GAMMA28: ::libc::c_uint = 5;
pub static AVCOL_TRC_SMPTE170M: ::libc::c_uint = 6;
pub static AVCOL_TRC_SMPTE240M: ::libc::c_uint = 7;
pub static AVCOL_TRC_LINEAR: ::libc::c_uint = 8;
pub static AVCOL_TRC_LOG: ::libc::c_uint = 9;
pub static AVCOL_TRC_LOG_SQRT: ::libc::c_uint = 10;
pub static AVCOL_TRC_IEC61966_2_4: ::libc::c_uint = 11;
pub static AVCOL_TRC_BT1361_ECG: ::libc::c_uint = 12;
pub static AVCOL_TRC_IEC61966_2_1: ::libc::c_uint = 13;
pub static AVCOL_TRC_BT2020_10: ::libc::c_uint = 14;
pub static AVCOL_TRC_BT2020_12: ::libc::c_uint = 15;
pub static AVCOL_TRC_NB: ::libc::c_uint = 16;
pub type Enum_AVChromaLocation = ::libc::c_uint;
pub static AVCHROMA_LOC_UNSPECIFIED: ::libc::c_uint = 0;
pub static AVCHROMA_LOC_LEFT: ::libc::c_uint = 1;
pub static AVCHROMA_LOC_CENTER: ::libc::c_uint = 2;
pub static AVCHROMA_LOC_TOPLEFT: ::libc::c_uint = 3;
pub static AVCHROMA_LOC_TOP: ::libc::c_uint = 4;
pub static AVCHROMA_LOC_BOTTOMLEFT: ::libc::c_uint = 5;
pub static AVCHROMA_LOC_BOTTOM: ::libc::c_uint = 6;
pub static AVCHROMA_LOC_NB: ::libc::c_uint = 7;
pub type Enum_AVAudioServiceType = ::libc::c_uint;
pub static AV_AUDIO_SERVICE_TYPE_MAIN: ::libc::c_uint = 0;
pub static AV_AUDIO_SERVICE_TYPE_EFFECTS: ::libc::c_uint = 1;
pub static AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED: ::libc::c_uint = 2;
pub static AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED: ::libc::c_uint = 3;
pub static AV_AUDIO_SERVICE_TYPE_DIALOGUE: ::libc::c_uint = 4;
pub static AV_AUDIO_SERVICE_TYPE_COMMENTARY: ::libc::c_uint = 5;
pub static AV_AUDIO_SERVICE_TYPE_EMERGENCY: ::libc::c_uint = 6;
pub static AV_AUDIO_SERVICE_TYPE_VOICE_OVER: ::libc::c_uint = 7;
pub static AV_AUDIO_SERVICE_TYPE_KARAOKE: ::libc::c_uint = 8;
pub static AV_AUDIO_SERVICE_TYPE_NB: ::libc::c_uint = 9;
#[repr(C)]
pub struct Struct_RcOverride {
    pub start_frame: ::libc::c_int,
    pub end_frame: ::libc::c_int,
    pub qscale: ::libc::c_int,
    pub quality_factor: ::libc::c_float,
}
pub type RcOverride = Struct_RcOverride;
#[repr(C)]
pub struct Struct_AVPanScan {
    pub id: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub position: [[int16_t, ..2u], ..3u],
}
pub type AVPanScan = Struct_AVPanScan;
pub type Enum_AVPacketSideDataType = ::libc::c_uint;
pub static AV_PKT_DATA_PALETTE: ::libc::c_uint = 0;
pub static AV_PKT_DATA_NEW_EXTRADATA: ::libc::c_uint = 1;
pub static AV_PKT_DATA_PARAM_CHANGE: ::libc::c_uint = 2;
pub static AV_PKT_DATA_H263_MB_INFO: ::libc::c_uint = 3;
pub static AV_PKT_DATA_SKIP_SAMPLES: ::libc::c_uint = 70;
pub static AV_PKT_DATA_JP_DUALMONO: ::libc::c_uint = 71;
pub static AV_PKT_DATA_STRINGS_METADATA: ::libc::c_uint = 72;
pub static AV_PKT_DATA_SUBTITLE_POSITION: ::libc::c_uint = 73;
pub static AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL: ::libc::c_uint = 74;
pub static AV_PKT_DATA_WEBVTT_IDENTIFIER: ::libc::c_uint = 75;
pub static AV_PKT_DATA_WEBVTT_SETTINGS: ::libc::c_uint = 76;
pub static AV_PKT_DATA_METADATA_UPDATE: ::libc::c_uint = 77;
#[repr(C)]
pub struct Struct_AVPacket {
    pub buf: *mut avutil::AVBufferRef,
    pub pts: int64_t,
    pub dts: int64_t,
    pub data: *mut uint8_t,
    pub size: ::libc::c_int,
    pub stream_index: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub side_data: *mut Struct_Unnamed1,
    pub side_data_elems: ::libc::c_int,
    pub duration: ::libc::c_int,
    pub destruct: ::std::option::Option<extern "C" fn
                                            (arg1: *mut Struct_AVPacket)>,
    pub _priv: *mut ::libc::c_void,
    pub pos: int64_t,
    pub convergence_duration: int64_t,
}
#[repr(C)]
pub struct Struct_Unnamed1 {
    pub data: *mut uint8_t,
    pub size: ::libc::c_int,
    pub _type: Enum_AVPacketSideDataType,
}
pub type AVPacket = Struct_AVPacket;
pub type Enum_AVSideDataParamChangeFlags = ::libc::c_uint;
pub static AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT: ::libc::c_uint = 1;
pub static AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT: ::libc::c_uint = 2;
pub static AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE: ::libc::c_uint = 4;
pub static AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS: ::libc::c_uint = 8;
pub enum Struct_AVCodecInternal { }
pub type Enum_AVFieldOrder = ::libc::c_uint;
pub static AV_FIELD_UNKNOWN: ::libc::c_uint = 0;
pub static AV_FIELD_PROGRESSIVE: ::libc::c_uint = 1;
pub static AV_FIELD_TT: ::libc::c_uint = 2;
pub static AV_FIELD_BB: ::libc::c_uint = 3;
pub static AV_FIELD_TB: ::libc::c_uint = 4;
pub static AV_FIELD_BT: ::libc::c_uint = 5;
#[repr(C)]
pub struct Struct_AVCodecContext {
    pub av_class: *const avutil::AVClass,
    pub log_level_offset: ::libc::c_int,
    pub codec_type: avutil::Enum_AVMediaType,
    pub codec: *const Struct_AVCodec,
    pub codec_name: [::libc::c_char, ..32u],
    pub codec_id: Enum_AVCodecID,
    pub codec_tag: ::libc::c_uint,
    pub stream_codec_tag: ::libc::c_uint,
    pub priv_data: *mut ::libc::c_void,
    pub internal: *mut Struct_AVCodecInternal,
    pub opaque: *mut ::libc::c_void,
    pub bit_rate: ::libc::c_int,
    pub bit_rate_tolerance: ::libc::c_int,
    pub global_quality: ::libc::c_int,
    pub compression_level: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub flags2: ::libc::c_int,
    pub extradata: *mut uint8_t,
    pub extradata_size: ::libc::c_int,
    pub time_base: avutil::AVRational,
    pub ticks_per_frame: ::libc::c_int,
    pub delay: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub coded_width: ::libc::c_int,
    pub coded_height: ::libc::c_int,
    pub gop_size: ::libc::c_int,
    pub pix_fmt: avutil::Enum_AVPixelFormat,
    pub me_method: ::libc::c_int,
    pub draw_horiz_band: ::std::option::Option<extern "C" fn
                                                   (arg1:
                                                        *mut Struct_AVCodecContext,
                                                    arg2: *const avutil::AVFrame,
                                                    arg3:
                                                        [::libc::c_int, ..8u],
                                                    arg4: ::libc::c_int,
                                                    arg5: ::libc::c_int,
                                                    arg6: ::libc::c_int)>,
    pub get_format: ::std::option::Option<extern "C" fn
                                              (arg1:
                                                   *mut Struct_AVCodecContext,
                                               arg2:
                                                   *const avutil::Enum_AVPixelFormat)
                                              -> avutil::Enum_AVPixelFormat>,
    pub max_b_frames: ::libc::c_int,
    pub b_quant_factor: ::libc::c_float,
    pub rc_strategy: ::libc::c_int,
    pub b_frame_strategy: ::libc::c_int,
    pub b_quant_offset: ::libc::c_float,
    pub has_b_frames: ::libc::c_int,
    pub mpeg_quant: ::libc::c_int,
    pub i_quant_factor: ::libc::c_float,
    pub i_quant_offset: ::libc::c_float,
    pub lumi_masking: ::libc::c_float,
    pub temporal_cplx_masking: ::libc::c_float,
    pub spatial_cplx_masking: ::libc::c_float,
    pub p_masking: ::libc::c_float,
    pub dark_masking: ::libc::c_float,
    pub slice_count: ::libc::c_int,
    pub prediction_method: ::libc::c_int,
    pub slice_offset: *mut ::libc::c_int,
    pub sample_aspect_ratio: avutil::AVRational,
    pub me_cmp: ::libc::c_int,
    pub me_sub_cmp: ::libc::c_int,
    pub mb_cmp: ::libc::c_int,
    pub ildct_cmp: ::libc::c_int,
    pub dia_size: ::libc::c_int,
    pub last_predictor_count: ::libc::c_int,
    pub pre_me: ::libc::c_int,
    pub me_pre_cmp: ::libc::c_int,
    pub pre_dia_size: ::libc::c_int,
    pub me_subpel_quality: ::libc::c_int,
    pub dtg_active_format: ::libc::c_int,
    pub me_range: ::libc::c_int,
    pub intra_quant_bias: ::libc::c_int,
    pub inter_quant_bias: ::libc::c_int,
    pub slice_flags: ::libc::c_int,
    pub xvmc_acceleration: ::libc::c_int,
    pub mb_decision: ::libc::c_int,
    pub intra_matrix: *mut uint16_t,
    pub inter_matrix: *mut uint16_t,
    pub scenechange_threshold: ::libc::c_int,
    pub noise_reduction: ::libc::c_int,
    pub me_threshold: ::libc::c_int,
    pub mb_threshold: ::libc::c_int,
    pub intra_dc_precision: ::libc::c_int,
    pub skip_top: ::libc::c_int,
    pub skip_bottom: ::libc::c_int,
    pub border_masking: ::libc::c_float,
    pub mb_lmin: ::libc::c_int,
    pub mb_lmax: ::libc::c_int,
    pub me_penalty_compensation: ::libc::c_int,
    pub bidir_refine: ::libc::c_int,
    pub brd_scale: ::libc::c_int,
    pub keyint_min: ::libc::c_int,
    pub refs: ::libc::c_int,
    pub chromaoffset: ::libc::c_int,
    pub scenechange_factor: ::libc::c_int,
    pub mv0_threshold: ::libc::c_int,
    pub b_sensitivity: ::libc::c_int,
    pub color_primaries: Enum_AVColorPrimaries,
    pub color_trc: Enum_AVColorTransferCharacteristic,
    pub colorspace: avutil::Enum_AVColorSpace,
    pub color_range: avutil::Enum_AVColorRange,
    pub chroma_sample_location: Enum_AVChromaLocation,
    pub slices: ::libc::c_int,
    pub field_order: Enum_AVFieldOrder,
    pub sample_rate: ::libc::c_int,
    pub channels: ::libc::c_int,
    pub sample_fmt: avutil::Enum_AVSampleFormat,
    pub frame_size: ::libc::c_int,
    pub frame_number: ::libc::c_int,
    pub block_align: ::libc::c_int,
    pub cutoff: ::libc::c_int,
    pub request_channels: ::libc::c_int,
    pub channel_layout: uint64_t,
    pub request_channel_layout: uint64_t,
    pub audio_service_type: Enum_AVAudioServiceType,
    pub request_sample_fmt: avutil::Enum_AVSampleFormat,
    pub get_buffer: ::std::option::Option<extern "C" fn
                                              (arg1:
                                                   *mut Struct_AVCodecContext,
                                               arg2: *mut avutil::AVFrame)
                                              -> ::libc::c_int>,
    pub release_buffer: ::std::option::Option<extern "C" fn
                                                  (arg1:
                                                       *mut Struct_AVCodecContext,
                                                   arg2: *mut avutil::AVFrame)>,
    pub reget_buffer: ::std::option::Option<extern "C" fn
                                                (arg1:
                                                     *mut Struct_AVCodecContext,
                                                 arg2: *mut avutil::AVFrame)
                                                -> ::libc::c_int>,
    pub get_buffer2: ::std::option::Option<extern "C" fn
                                               (arg1:
                                                    *mut Struct_AVCodecContext,
                                                arg2: *mut avutil::AVFrame,
                                                arg3: ::libc::c_int)
                                               -> ::libc::c_int>,
    pub refcounted_frames: ::libc::c_int,
    pub qcompress: ::libc::c_float,
    pub qblur: ::libc::c_float,
    pub qmin: ::libc::c_int,
    pub qmax: ::libc::c_int,
    pub max_qdiff: ::libc::c_int,
    pub rc_qsquish: ::libc::c_float,
    pub rc_qmod_amp: ::libc::c_float,
    pub rc_qmod_freq: ::libc::c_int,
    pub rc_buffer_size: ::libc::c_int,
    pub rc_override_count: ::libc::c_int,
    pub rc_override: *mut RcOverride,
    pub rc_eq: *const ::libc::c_char,
    pub rc_max_rate: ::libc::c_int,
    pub rc_min_rate: ::libc::c_int,
    pub rc_buffer_aggressivity: ::libc::c_float,
    pub rc_initial_cplx: ::libc::c_float,
    pub rc_max_available_vbv_use: ::libc::c_float,
    pub rc_min_vbv_overflow_use: ::libc::c_float,
    pub rc_initial_buffer_occupancy: ::libc::c_int,
    pub coder_type: ::libc::c_int,
    pub context_model: ::libc::c_int,
    pub lmin: ::libc::c_int,
    pub lmax: ::libc::c_int,
    pub frame_skip_threshold: ::libc::c_int,
    pub frame_skip_factor: ::libc::c_int,
    pub frame_skip_exp: ::libc::c_int,
    pub frame_skip_cmp: ::libc::c_int,
    pub trellis: ::libc::c_int,
    pub min_prediction_order: ::libc::c_int,
    pub max_prediction_order: ::libc::c_int,
    pub timecode_frame_start: int64_t,
    pub rtp_callback: ::std::option::Option<extern "C" fn
                                                (arg1:
                                                     *mut Struct_AVCodecContext,
                                                 arg2: *mut ::libc::c_void,
                                                 arg3: ::libc::c_int,
                                                 arg4: ::libc::c_int)>,
    pub rtp_payload_size: ::libc::c_int,
    pub mv_bits: ::libc::c_int,
    pub header_bits: ::libc::c_int,
    pub i_tex_bits: ::libc::c_int,
    pub p_tex_bits: ::libc::c_int,
    pub i_count: ::libc::c_int,
    pub p_count: ::libc::c_int,
    pub skip_count: ::libc::c_int,
    pub misc_bits: ::libc::c_int,
    pub frame_bits: ::libc::c_int,
    pub stats_out: *mut ::libc::c_char,
    pub stats_in: *mut ::libc::c_char,
    pub workaround_bugs: ::libc::c_int,
    pub strict_std_compliance: ::libc::c_int,
    pub error_concealment: ::libc::c_int,
    pub debug: ::libc::c_int,
    pub debug_mv: ::libc::c_int,
    pub err_recognition: ::libc::c_int,
    pub reordered_opaque: int64_t,
    pub hwaccel: *mut Struct_AVHWAccel,
    pub hwaccel_context: *mut ::libc::c_void,
    pub error: [uint64_t, ..8u],
    pub dct_algo: ::libc::c_int,
    pub idct_algo: ::libc::c_int,
    pub bits_per_coded_sample: ::libc::c_int,
    pub bits_per_raw_sample: ::libc::c_int,
    pub lowres: ::libc::c_int,
    pub coded_frame: *mut avutil::AVFrame,
    pub thread_count: ::libc::c_int,
    pub thread_type: ::libc::c_int,
    pub active_thread_type: ::libc::c_int,
    pub thread_safe_callbacks: ::libc::c_int,
    pub execute: ::std::option::Option<extern "C" fn
                                           (arg1: *mut Struct_AVCodecContext,
                                            arg2:
                                                ::std::option::Option<extern "C" fn
                                                                          (arg1:
                                                                               *mut Struct_AVCodecContext,
                                                                           arg2:
                                                                               *mut ::libc::c_void)
                                                                          ->
                                                                              ::libc::c_int>,
                                            arg3: *mut ::libc::c_void,
                                            arg4: *mut ::libc::c_int,
                                            arg5: ::libc::c_int,
                                            arg6: ::libc::c_int)
                                           -> ::libc::c_int>,
    pub execute2: ::std::option::Option<extern "C" fn
                                            (arg1: *mut Struct_AVCodecContext,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn
                                                                           (arg1:
                                                                                *mut Struct_AVCodecContext,
                                                                            arg2:
                                                                                *mut ::libc::c_void,
                                                                            arg3:
                                                                                ::libc::c_int,
                                                                            arg4:
                                                                                ::libc::c_int)
                                                                           ->
                                                                               ::libc::c_int>,
                                             arg3: *mut ::libc::c_void,
                                             arg4: *mut ::libc::c_int,
                                             arg5: ::libc::c_int)
                                            -> ::libc::c_int>,
    pub thread_opaque: *mut ::libc::c_void,
    pub nsse_weight: ::libc::c_int,
    pub profile: ::libc::c_int,
    pub level: ::libc::c_int,
    pub skip_loop_filter: Enum_AVDiscard,
    pub skip_idct: Enum_AVDiscard,
    pub skip_frame: Enum_AVDiscard,
    pub subtitle_header: *mut uint8_t,
    pub subtitle_header_size: ::libc::c_int,
    pub error_rate: ::libc::c_int,
    pub pkt: *mut AVPacket,
    pub vbv_delay: uint64_t,
    pub pkt_timebase: avutil::AVRational,
    pub codec_descriptor: *const AVCodecDescriptor,
    pub pts_correction_num_faulty_pts: int64_t,
    pub pts_correction_num_faulty_dts: int64_t,
    pub pts_correction_last_pts: int64_t,
    pub pts_correction_last_dts: int64_t,
    pub sub_charenc: *mut ::libc::c_char,
    pub sub_charenc_mode: ::libc::c_int,
    pub skip_alpha: ::libc::c_int,
    pub seek_preroll: ::libc::c_int,
    pub chroma_intra_matrix: *mut uint16_t,
}
pub type AVCodecContext = Struct_AVCodecContext;
#[repr(C)]
pub struct Struct_AVProfile {
    pub profile: ::libc::c_int,
    pub name: *const ::libc::c_char,
}
pub type AVProfile = Struct_AVProfile;
pub enum Struct_AVCodecDefault { }
pub type AVCodecDefault = Struct_AVCodecDefault;
#[repr(C)]
pub struct Struct_AVCodec {
    pub name: *const ::libc::c_char,
    pub long_name: *const ::libc::c_char,
    pub _type: avutil::Enum_AVMediaType,
    pub id: Enum_AVCodecID,
    pub capabilities: ::libc::c_int,
    pub supported_framerates: *const avutil::AVRational,
    pub pix_fmts: *const avutil::Enum_AVPixelFormat,
    pub supported_samplerates: *const ::libc::c_int,
    pub sample_fmts: *const avutil::Enum_AVSampleFormat,
    pub channel_layouts: *const uint64_t,
    pub max_lowres: uint8_t,
    pub priv_class: *const avutil::AVClass,
    pub profiles: *const AVProfile,
    pub priv_data_size: ::libc::c_int,
    pub next: *mut Struct_AVCodec,
    pub init_thread_copy: ::std::option::Option<extern "C" fn
                                                    (arg1:
                                                         *mut AVCodecContext)
                                                    -> ::libc::c_int>,
    pub update_thread_context: ::std::option::Option<extern "C" fn
                                                         (arg1:
                                                              *mut AVCodecContext,
                                                          arg2:
                                                              *const AVCodecContext)
                                                         -> ::libc::c_int>,
    pub defaults: *const AVCodecDefault,
    pub init_static_data: ::std::option::Option<extern "C" fn
                                                    (arg1:
                                                         *mut Struct_AVCodec)>,
    pub init: ::std::option::Option<extern "C" fn(arg1: *mut AVCodecContext)
                                        -> ::libc::c_int>,
    pub encode_sub: ::std::option::Option<extern "C" fn
                                              (arg1: *mut AVCodecContext,
                                               arg2: *mut uint8_t,
                                               arg3: ::libc::c_int,
                                               arg4: *const Struct_AVSubtitle)
                                              -> ::libc::c_int>,
    pub encode2: ::std::option::Option<extern "C" fn
                                           (arg1: *mut AVCodecContext,
                                            arg2: *mut AVPacket,
                                            arg3: *const avutil::AVFrame,
                                            arg4: *mut ::libc::c_int)
                                           -> ::libc::c_int>,
    pub decode: ::std::option::Option<extern "C" fn
                                          (arg1: *mut AVCodecContext,
                                           arg2: *mut ::libc::c_void,
                                           arg3: *mut ::libc::c_int,
                                           arg4: *mut AVPacket)
                                          -> ::libc::c_int>,
    pub close: ::std::option::Option<extern "C" fn(arg1: *mut AVCodecContext)
                                         -> ::libc::c_int>,
    pub flush: ::std::option::Option<extern "C" fn
                                         (arg1: *mut AVCodecContext)>,
}
pub type AVCodec = Struct_AVCodec;
pub enum Struct_MpegEncContext { }
#[repr(C)]
pub struct Struct_AVHWAccel {
    pub name: *const ::libc::c_char,
    pub _type: avutil::Enum_AVMediaType,
    pub id: Enum_AVCodecID,
    pub pix_fmt: avutil::Enum_AVPixelFormat,
    pub capabilities: ::libc::c_int,
    pub next: *mut Struct_AVHWAccel,
    pub start_frame: ::std::option::Option<extern "C" fn
                                               (arg1: *mut AVCodecContext,
                                                arg2: *const uint8_t,
                                                arg3: uint32_t)
                                               -> ::libc::c_int>,
    pub decode_slice: ::std::option::Option<extern "C" fn
                                                (arg1: *mut AVCodecContext,
                                                 arg2: *const uint8_t,
                                                 arg3: uint32_t)
                                                -> ::libc::c_int>,
    pub end_frame: ::std::option::Option<extern "C" fn
                                             (arg1: *mut AVCodecContext)
                                             -> ::libc::c_int>,
    pub priv_data_size: ::libc::c_int,
    pub decode_mb: ::std::option::Option<extern "C" fn
                                             (arg1:
                                                  *mut Struct_MpegEncContext)>,
}
pub type AVHWAccel = Struct_AVHWAccel;
#[repr(C)]
pub struct Struct_AVPicture {
    pub data: [*mut uint8_t, ..8u],
    pub linesize: [::libc::c_int, ..8u],
}
pub type AVPicture = Struct_AVPicture;
pub type Enum_AVSubtitleType = ::libc::c_uint;
pub static SUBTITLE_NONE: ::libc::c_uint = 0;
pub static SUBTITLE_BITMAP: ::libc::c_uint = 1;
pub static SUBTITLE_TEXT: ::libc::c_uint = 2;
pub static SUBTITLE_ASS: ::libc::c_uint = 3;
#[repr(C)]
pub struct Struct_AVSubtitleRect {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub w: ::libc::c_int,
    pub h: ::libc::c_int,
    pub nb_colors: ::libc::c_int,
    pub pict: AVPicture,
    pub _type: Enum_AVSubtitleType,
    pub text: *mut ::libc::c_char,
    pub ass: *mut ::libc::c_char,
    pub flags: ::libc::c_int,
}
pub type AVSubtitleRect = Struct_AVSubtitleRect;
#[repr(C)]
pub struct Struct_AVSubtitle {
    pub format: uint16_t,
    pub start_display_time: uint32_t,
    pub end_display_time: uint32_t,
    pub num_rects: ::libc::c_uint,
    pub rects: *mut *mut AVSubtitleRect,
    pub pts: int64_t,
}
pub type AVSubtitle = Struct_AVSubtitle;
pub type Enum_AVPictureStructure = ::libc::c_uint;
pub static AV_PICTURE_STRUCTURE_UNKNOWN: ::libc::c_uint = 0;
pub static AV_PICTURE_STRUCTURE_TOP_FIELD: ::libc::c_uint = 1;
pub static AV_PICTURE_STRUCTURE_BOTTOM_FIELD: ::libc::c_uint = 2;
pub static AV_PICTURE_STRUCTURE_FRAME: ::libc::c_uint = 3;
#[repr(C)]
pub struct Struct_AVCodecParserContext {
    pub priv_data: *mut ::libc::c_void,
    pub parser: *mut Struct_AVCodecParser,
    pub frame_offset: int64_t,
    pub cur_offset: int64_t,
    pub next_frame_offset: int64_t,
    pub pict_type: ::libc::c_int,
    pub repeat_pict: ::libc::c_int,
    pub pts: int64_t,
    pub dts: int64_t,
    pub last_pts: int64_t,
    pub last_dts: int64_t,
    pub fetch_timestamp: ::libc::c_int,
    pub cur_frame_start_index: ::libc::c_int,
    pub cur_frame_offset: [int64_t, ..4u],
    pub cur_frame_pts: [int64_t, ..4u],
    pub cur_frame_dts: [int64_t, ..4u],
    pub flags: ::libc::c_int,
    pub offset: int64_t,
    pub cur_frame_end: [int64_t, ..4u],
    pub key_frame: ::libc::c_int,
    pub convergence_duration: int64_t,
    pub dts_sync_point: ::libc::c_int,
    pub dts_ref_dts_delta: ::libc::c_int,
    pub pts_dts_delta: ::libc::c_int,
    pub cur_frame_pos: [int64_t, ..4u],
    pub pos: int64_t,
    pub last_pos: int64_t,
    pub duration: ::libc::c_int,
    pub field_order: Enum_AVFieldOrder,
    pub picture_structure: Enum_AVPictureStructure,
    pub output_picture_number: ::libc::c_int,
}
pub type AVCodecParserContext = Struct_AVCodecParserContext;
#[repr(C)]
pub struct Struct_AVCodecParser {
    pub codec_ids: [::libc::c_int, ..5u],
    pub priv_data_size: ::libc::c_int,
    pub parser_init: ::std::option::Option<extern "C" fn
                                               (arg1:
                                                    *mut AVCodecParserContext)
                                               -> ::libc::c_int>,
    pub parser_parse: ::std::option::Option<extern "C" fn
                                                (arg1:
                                                     *mut AVCodecParserContext,
                                                 arg2: *mut AVCodecContext,
                                                 arg3: *mut *const uint8_t,
                                                 arg4: *mut ::libc::c_int,
                                                 arg5: *const uint8_t,
                                                 arg6: ::libc::c_int)
                                                -> ::libc::c_int>,
    pub parser_close: ::std::option::Option<extern "C" fn
                                                (arg1:
                                                     *mut AVCodecParserContext)>,
    pub split: ::std::option::Option<extern "C" fn
                                         (arg1: *mut AVCodecContext,
                                          arg2: *const uint8_t,
                                          arg3: ::libc::c_int)
                                         -> ::libc::c_int>,
    pub next: *mut Struct_AVCodecParser,
}
pub type AVCodecParser = Struct_AVCodecParser;
pub enum Struct_ReSampleContext { }
pub enum Struct_AVResampleContext { }
pub type ReSampleContext = Struct_ReSampleContext;
#[repr(C)]
pub struct Struct_AVBitStreamFilterContext {
    pub priv_data: *mut ::libc::c_void,
    pub filter: *mut Struct_AVBitStreamFilter,
    pub parser: *mut AVCodecParserContext,
    pub next: *mut Struct_AVBitStreamFilterContext,
}
pub type AVBitStreamFilterContext = Struct_AVBitStreamFilterContext;
#[repr(C)]
pub struct Struct_AVBitStreamFilter {
    pub name: *const ::libc::c_char,
    pub priv_data_size: ::libc::c_int,
    pub filter: ::std::option::Option<extern "C" fn
                                          (arg1:
                                               *mut AVBitStreamFilterContext,
                                           arg2: *mut AVCodecContext,
                                           arg3: *const ::libc::c_char,
                                           arg4: *mut *mut uint8_t,
                                           arg5: *mut ::libc::c_int,
                                           arg6: *const uint8_t,
                                           arg7: ::libc::c_int,
                                           arg8: ::libc::c_int)
                                          -> ::libc::c_int>,
    pub close: ::std::option::Option<extern "C" fn
                                         (arg1:
                                              *mut AVBitStreamFilterContext)>,
    pub next: *mut Struct_AVBitStreamFilter,
}
pub type AVBitStreamFilter = Struct_AVBitStreamFilter;
pub type Enum_AVLockOp = ::libc::c_uint;
pub static AV_LOCK_CREATE: ::libc::c_uint = 0;
pub static AV_LOCK_OBTAIN: ::libc::c_uint = 1;
pub static AV_LOCK_RELEASE: ::libc::c_uint = 2;
pub static AV_LOCK_DESTROY: ::libc::c_uint = 3;
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
#[link(name = "avcodec")]
extern "C" {
    pub fn av_codec_get_pkt_timebase(avctx: *const AVCodecContext) ->
     avutil::AVRational;
    pub fn av_codec_set_pkt_timebase(avctx: *mut AVCodecContext,
                                     val: avutil::AVRational);
    pub fn av_codec_get_codec_descriptor(avctx: *const AVCodecContext) ->
     *const AVCodecDescriptor;
    pub fn av_codec_set_codec_descriptor(avctx: *mut AVCodecContext,
                                         desc: *const AVCodecDescriptor);
    pub fn av_codec_get_lowres(avctx: *const AVCodecContext) -> ::libc::c_int;
    pub fn av_codec_set_lowres(avctx: *mut AVCodecContext,
                               val: ::libc::c_int);
    pub fn av_codec_get_seek_preroll(avctx: *const AVCodecContext) ->
     ::libc::c_int;
    pub fn av_codec_set_seek_preroll(avctx: *mut AVCodecContext,
                                     val: ::libc::c_int);
    pub fn av_codec_get_chroma_intra_matrix(avctx: *const AVCodecContext) ->
     *mut uint16_t;
    pub fn av_codec_set_chroma_intra_matrix(avctx: *mut AVCodecContext,
                                            val: *mut uint16_t);
    pub fn av_codec_get_max_lowres(codec: *const AVCodec) -> ::libc::c_int;
    pub fn av_codec_next(c: *const AVCodec) -> *mut AVCodec;
    pub fn avcodec_version() -> ::libc::c_uint;
    pub fn avcodec_configuration() -> *const ::libc::c_char;
    pub fn avcodec_license() -> *const ::libc::c_char;
    pub fn avcodec_register(codec: *mut AVCodec);
    pub fn avcodec_register_all();
    pub fn avcodec_alloc_context3(codec: *const AVCodec) ->
     *mut AVCodecContext;
    pub fn avcodec_get_context_defaults3(s: *mut AVCodecContext,
                                         codec: *const AVCodec) ->
     ::libc::c_int;
    pub fn avcodec_get_class() -> *const avutil::AVClass;
    pub fn avcodec_get_frame_class() -> *const avutil::AVClass;
    pub fn avcodec_get_subtitle_rect_class() -> *const avutil::AVClass;
    pub fn avcodec_copy_context(dest: *mut AVCodecContext,
                                src: *const AVCodecContext) -> ::libc::c_int;
    pub fn avcodec_alloc_frame() -> *mut avutil::AVFrame;
    pub fn avcodec_get_frame_defaults(frame: *mut avutil::AVFrame);
    pub fn avcodec_free_frame(frame: *mut *mut avutil::AVFrame);
    pub fn avcodec_open2(avctx: *mut AVCodecContext, codec: *const AVCodec,
                         options: *mut *mut avutil::AVDictionary) -> ::libc::c_int;
    pub fn avcodec_close(avctx: *mut AVCodecContext) -> ::libc::c_int;
    pub fn avsubtitle_free(sub: *mut AVSubtitle);
    pub fn av_destruct_packet(pkt: *mut AVPacket);
    pub fn av_init_packet(pkt: *mut AVPacket);
    pub fn av_new_packet(pkt: *mut AVPacket, size: ::libc::c_int) ->
     ::libc::c_int;
    pub fn av_shrink_packet(pkt: *mut AVPacket, size: ::libc::c_int);
    pub fn av_grow_packet(pkt: *mut AVPacket, grow_by: ::libc::c_int) ->
     ::libc::c_int;
    pub fn av_packet_from_data(pkt: *mut AVPacket, data: *mut uint8_t,
                               size: ::libc::c_int) -> ::libc::c_int;
    pub fn av_dup_packet(pkt: *mut AVPacket) -> ::libc::c_int;
    pub fn av_copy_packet(dst: *mut AVPacket, src: *mut AVPacket) ->
     ::libc::c_int;
    pub fn av_copy_packet_side_data(dst: *mut AVPacket, src: *mut AVPacket) ->
     ::libc::c_int;
    pub fn av_free_packet(pkt: *mut AVPacket);
    pub fn av_packet_new_side_data(pkt: *mut AVPacket,
                                   _type: Enum_AVPacketSideDataType,
                                   size: ::libc::c_int) -> *mut uint8_t;
    pub fn av_packet_shrink_side_data(pkt: *mut AVPacket,
                                      _type: Enum_AVPacketSideDataType,
                                      size: ::libc::c_int) -> ::libc::c_int;
    pub fn av_packet_get_side_data(pkt: *mut AVPacket,
                                   _type: Enum_AVPacketSideDataType,
                                   size: *mut ::libc::c_int) -> *mut uint8_t;
    pub fn av_packet_merge_side_data(pkt: *mut AVPacket) -> ::libc::c_int;
    pub fn av_packet_split_side_data(pkt: *mut AVPacket) -> ::libc::c_int;
    pub fn av_packet_pack_dictionary(dict: *mut avutil::AVDictionary,
                                     size: *mut ::libc::c_int) ->
     *mut uint8_t;
    pub fn av_packet_unpack_dictionary(data: *const uint8_t,
                                       size: ::libc::c_int,
                                       dict: *mut *mut avutil::AVDictionary) ->
     ::libc::c_int;
    pub fn av_packet_free_side_data(pkt: *mut AVPacket);
    pub fn av_packet_ref(dst: *mut AVPacket, src: *mut AVPacket) ->
     ::libc::c_int;
    pub fn av_packet_unref(pkt: *mut AVPacket);
    pub fn av_packet_move_ref(dst: *mut AVPacket, src: *mut AVPacket);
    pub fn av_packet_copy_props(dst: *mut AVPacket, src: *const AVPacket) ->
     ::libc::c_int;
    pub fn avcodec_find_decoder(id: Enum_AVCodecID) -> *mut AVCodec;
    pub fn avcodec_find_decoder_by_name(name: *const ::libc::c_char) ->
     *mut AVCodec;
    pub fn avcodec_default_get_buffer(s: *mut AVCodecContext,
                                      pic: *mut avutil::AVFrame) -> ::libc::c_int;
    pub fn avcodec_default_release_buffer(s: *mut AVCodecContext,
                                          pic: *mut avutil::AVFrame);
    pub fn avcodec_default_reget_buffer(s: *mut AVCodecContext,
                                        pic: *mut avutil::AVFrame) -> ::libc::c_int;
    pub fn avcodec_default_get_buffer2(s: *mut AVCodecContext,
                                       frame: *mut avutil::AVFrame,
                                       flags: ::libc::c_int) -> ::libc::c_int;
    pub fn avcodec_get_edge_width() -> ::libc::c_uint;
    pub fn avcodec_align_dimensions(s: *mut AVCodecContext,
                                    width: *mut ::libc::c_int,
                                    height: *mut ::libc::c_int);
    pub fn avcodec_align_dimensions2(s: *mut AVCodecContext,
                                     width: *mut ::libc::c_int,
                                     height: *mut ::libc::c_int,
                                     linesize_align: [::libc::c_int, ..8u]);
    pub fn avcodec_enum_to_chroma_pos(xpos: *mut ::libc::c_int,
                                      ypos: *mut ::libc::c_int,
                                      pos: Enum_AVChromaLocation) ->
     ::libc::c_int;
    pub fn avcodec_chroma_pos_to_enum(xpos: ::libc::c_int,
                                      ypos: ::libc::c_int) ->
     Enum_AVChromaLocation;
    pub fn avcodec_decode_audio3(avctx: *mut AVCodecContext,
                                 samples: *mut int16_t,
                                 frame_size_ptr: *mut ::libc::c_int,
                                 avpkt: *mut AVPacket) -> ::libc::c_int;
    pub fn avcodec_decode_audio4(avctx: *mut AVCodecContext,
                                 frame: *mut avutil::AVFrame,
                                 got_frame_ptr: *mut ::libc::c_int,
                                 avpkt: *const AVPacket) -> ::libc::c_int;
    pub fn avcodec_decode_video2(avctx: *mut AVCodecContext,
                                 picture: *mut avutil::AVFrame,
                                 got_picture_ptr: *mut ::libc::c_int,
                                 avpkt: *const AVPacket) -> ::libc::c_int;
    pub fn avcodec_decode_subtitle2(avctx: *mut AVCodecContext,
                                    sub: *mut AVSubtitle,
                                    got_sub_ptr: *mut ::libc::c_int,
                                    avpkt: *mut AVPacket) -> ::libc::c_int;
    pub fn av_parser_next(c: *mut AVCodecParser) -> *mut AVCodecParser;
    pub fn av_register_codec_parser(parser: *mut AVCodecParser);
    pub fn av_parser_init(codec_id: ::libc::c_int) ->
     *mut AVCodecParserContext;
    pub fn av_parser_parse2(s: *mut AVCodecParserContext,
                            avctx: *mut AVCodecContext,
                            poutbuf: *mut *mut uint8_t,
                            poutbuf_size: *mut ::libc::c_int,
                            buf: *const uint8_t, buf_size: ::libc::c_int,
                            pts: int64_t, dts: int64_t, pos: int64_t) ->
     ::libc::c_int;
    pub fn av_parser_change(s: *mut AVCodecParserContext,
                            avctx: *mut AVCodecContext,
                            poutbuf: *mut *mut uint8_t,
                            poutbuf_size: *mut ::libc::c_int,
                            buf: *const uint8_t, buf_size: ::libc::c_int,
                            keyframe: ::libc::c_int) -> ::libc::c_int;
    pub fn av_parser_close(s: *mut AVCodecParserContext);
    pub fn avcodec_find_encoder(id: Enum_AVCodecID) -> *mut AVCodec;
    pub fn avcodec_find_encoder_by_name(name: *const ::libc::c_char) ->
     *mut AVCodec;
    pub fn avcodec_encode_audio(avctx: *mut AVCodecContext, buf: *mut uint8_t,
                                buf_size: ::libc::c_int,
                                samples: *const ::libc::c_short) ->
     ::libc::c_int;
    pub fn avcodec_encode_audio2(avctx: *mut AVCodecContext,
                                 avpkt: *mut AVPacket, frame: *const avutil::AVFrame,
                                 got_packet_ptr: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn avcodec_encode_video(avctx: *mut AVCodecContext, buf: *mut uint8_t,
                                buf_size: ::libc::c_int, pict: *const avutil::AVFrame)
     -> ::libc::c_int;
    pub fn avcodec_encode_video2(avctx: *mut AVCodecContext,
                                 avpkt: *mut AVPacket, frame: *const avutil::AVFrame,
                                 got_packet_ptr: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn avcodec_encode_subtitle(avctx: *mut AVCodecContext,
                                   buf: *mut uint8_t, buf_size: ::libc::c_int,
                                   sub: *const AVSubtitle) -> ::libc::c_int;
    pub fn av_audio_resample_init(output_channels: ::libc::c_int,
                                  input_channels: ::libc::c_int,
                                  output_rate: ::libc::c_int,
                                  input_rate: ::libc::c_int,
                                  sample_fmt_out: avutil::Enum_AVSampleFormat,
                                  sample_fmt_in: avutil::Enum_AVSampleFormat,
                                  filter_length: ::libc::c_int,
                                  log2_phase_count: ::libc::c_int,
                                  linear: ::libc::c_int,
                                  cutoff: ::libc::c_double) ->
     *mut ReSampleContext;
    pub fn audio_resample(s: *mut ReSampleContext,
                          output: *mut ::libc::c_short,
                          input: *mut ::libc::c_short,
                          nb_samples: ::libc::c_int) -> ::libc::c_int;
    pub fn audio_resample_close(s: *mut ReSampleContext);
    pub fn av_resample_init(out_rate: ::libc::c_int, in_rate: ::libc::c_int,
                            filter_length: ::libc::c_int,
                            log2_phase_count: ::libc::c_int,
                            linear: ::libc::c_int, cutoff: ::libc::c_double)
     -> *mut Struct_AVResampleContext;
    pub fn av_resample(c: *mut Struct_AVResampleContext,
                       dst: *mut ::libc::c_short, src: *mut ::libc::c_short,
                       consumed: *mut ::libc::c_int, src_size: ::libc::c_int,
                       dst_size: ::libc::c_int, update_ctx: ::libc::c_int) ->
     ::libc::c_int;
    pub fn av_resample_compensate(c: *mut Struct_AVResampleContext,
                                  sample_delta: ::libc::c_int,
                                  compensation_distance: ::libc::c_int);
    pub fn av_resample_close(c: *mut Struct_AVResampleContext);
    pub fn avpicture_alloc(picture: *mut AVPicture,
                           pix_fmt: avutil::Enum_AVPixelFormat, width: ::libc::c_int,
                           height: ::libc::c_int) -> ::libc::c_int;
    pub fn avpicture_free(picture: *mut AVPicture);
    pub fn avpicture_fill(picture: *mut AVPicture, ptr: *const uint8_t,
                          pix_fmt: avutil::Enum_AVPixelFormat, width: ::libc::c_int,
                          height: ::libc::c_int) -> ::libc::c_int;
    pub fn avpicture_layout(src: *const AVPicture,
                            pix_fmt: avutil::Enum_AVPixelFormat, width: ::libc::c_int,
                            height: ::libc::c_int, dest: *mut ::libc::c_uchar,
                            dest_size: ::libc::c_int) -> ::libc::c_int;
    pub fn avpicture_get_size(pix_fmt: avutil::Enum_AVPixelFormat,
                              width: ::libc::c_int, height: ::libc::c_int) ->
     ::libc::c_int;
    pub fn avpicture_deinterlace(dst: *mut AVPicture, src: *const AVPicture,
                                 pix_fmt: avutil::Enum_AVPixelFormat,
                                 width: ::libc::c_int, height: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_picture_copy(dst: *mut AVPicture, src: *const AVPicture,
                           pix_fmt: avutil::Enum_AVPixelFormat, width: ::libc::c_int,
                           height: ::libc::c_int);
    pub fn av_picture_crop(dst: *mut AVPicture, src: *const AVPicture,
                           pix_fmt: avutil::Enum_AVPixelFormat,
                           top_band: ::libc::c_int, left_band: ::libc::c_int)
     -> ::libc::c_int;
    pub fn av_picture_pad(dst: *mut AVPicture, src: *const AVPicture,
                          height: ::libc::c_int, width: ::libc::c_int,
                          pix_fmt: avutil::Enum_AVPixelFormat, padtop: ::libc::c_int,
                          padbottom: ::libc::c_int, padleft: ::libc::c_int,
                          padright: ::libc::c_int, color: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn avcodec_get_chroma_sub_sample(pix_fmt: avutil::Enum_AVPixelFormat,
                                         h_shift: *mut ::libc::c_int,
                                         v_shift: *mut ::libc::c_int);
    pub fn avcodec_pix_fmt_to_codec_tag(pix_fmt: avutil::Enum_AVPixelFormat) ->
     ::libc::c_uint;
    pub fn avcodec_get_pix_fmt_loss(dst_pix_fmt: avutil::Enum_AVPixelFormat,
                                    src_pix_fmt: avutil::Enum_AVPixelFormat,
                                    has_alpha: ::libc::c_int) ->
     ::libc::c_int;
    pub fn avcodec_find_best_pix_fmt_of_list(pix_fmt_list:
                                                 *const avutil::Enum_AVPixelFormat,
                                             src_pix_fmt: avutil::Enum_AVPixelFormat,
                                             has_alpha: ::libc::c_int,
                                             loss_ptr: *mut ::libc::c_int) ->
     avutil::Enum_AVPixelFormat;
    pub fn avcodec_find_best_pix_fmt_of_2(dst_pix_fmt1: avutil::Enum_AVPixelFormat,
                                          dst_pix_fmt2: avutil::Enum_AVPixelFormat,
                                          src_pix_fmt: avutil::Enum_AVPixelFormat,
                                          has_alpha: ::libc::c_int,
                                          loss_ptr: *mut ::libc::c_int) ->
     avutil::Enum_AVPixelFormat;
    pub fn avcodec_find_best_pix_fmt2(dst_pix_fmt1: avutil::Enum_AVPixelFormat,
                                      dst_pix_fmt2: avutil::Enum_AVPixelFormat,
                                      src_pix_fmt: avutil::Enum_AVPixelFormat,
                                      has_alpha: ::libc::c_int,
                                      loss_ptr: *mut ::libc::c_int) ->
     avutil::Enum_AVPixelFormat;
    pub fn avcodec_default_get_format(s: *mut Struct_AVCodecContext,
                                      fmt: *const avutil::Enum_AVPixelFormat) ->
     avutil::Enum_AVPixelFormat;
    pub fn avcodec_set_dimensions(s: *mut AVCodecContext,
                                  width: ::libc::c_int,
                                  height: ::libc::c_int);
    pub fn av_get_codec_tag_string(buf: *mut ::libc::c_char, buf_size: size_t,
                                   codec_tag: ::libc::c_uint) -> size_t;
    pub fn avcodec_string(buf: *mut ::libc::c_char, buf_size: ::libc::c_int,
                          enc: *mut AVCodecContext, encode: ::libc::c_int);
    pub fn av_get_profile_name(codec: *const AVCodec, profile: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn avcodec_default_execute(c: *mut AVCodecContext,
                                   func:
                                       ::std::option::Option<extern "C" fn
                                                                 (arg1:
                                                                      *mut AVCodecContext,
                                                                  arg2:
                                                                      *mut ::libc::c_void)
                                                                 ->
                                                                     ::libc::c_int>,
                                   arg: *mut ::libc::c_void,
                                   ret: *mut ::libc::c_int,
                                   count: ::libc::c_int, size: ::libc::c_int)
     -> ::libc::c_int;
    pub fn avcodec_default_execute2(c: *mut AVCodecContext,
                                    func:
                                        ::std::option::Option<extern "C" fn
                                                                  (arg1:
                                                                       *mut AVCodecContext,
                                                                   arg2:
                                                                       *mut ::libc::c_void,
                                                                   arg3:
                                                                       ::libc::c_int,
                                                                   arg4:
                                                                       ::libc::c_int)
                                                                  ->
                                                                      ::libc::c_int>,
                                    arg: *mut ::libc::c_void,
                                    ret: *mut ::libc::c_int,
                                    count: ::libc::c_int) -> ::libc::c_int;
    pub fn avcodec_fill_audio_frame(frame: *mut avutil::AVFrame,
                                    nb_channels: ::libc::c_int,
                                    sample_fmt: avutil::Enum_AVSampleFormat,
                                    buf: *const uint8_t,
                                    buf_size: ::libc::c_int,
                                    align: ::libc::c_int) -> ::libc::c_int;
    pub fn avcodec_flush_buffers(avctx: *mut AVCodecContext);
    pub fn av_get_bits_per_sample(codec_id: Enum_AVCodecID) -> ::libc::c_int;
    pub fn av_get_pcm_codec(fmt: avutil::Enum_AVSampleFormat, _be: ::libc::c_int) ->
     Enum_AVCodecID;
    pub fn av_get_exact_bits_per_sample(codec_id: Enum_AVCodecID) ->
     ::libc::c_int;
    pub fn av_get_audio_frame_duration(avctx: *mut AVCodecContext,
                                       frame_bytes: ::libc::c_int) ->
     ::libc::c_int;
    pub fn av_register_bitstream_filter(bsf: *mut AVBitStreamFilter);
    pub fn av_bitstream_filter_init(name: *const ::libc::c_char) ->
     *mut AVBitStreamFilterContext;
    pub fn av_bitstream_filter_filter(bsfc: *mut AVBitStreamFilterContext,
                                      avctx: *mut AVCodecContext,
                                      args: *const ::libc::c_char,
                                      poutbuf: *mut *mut uint8_t,
                                      poutbuf_size: *mut ::libc::c_int,
                                      buf: *const uint8_t,
                                      buf_size: ::libc::c_int,
                                      keyframe: ::libc::c_int) ->
     ::libc::c_int;
    pub fn av_bitstream_filter_close(bsf: *mut AVBitStreamFilterContext);
    pub fn av_bitstream_filter_next(f: *mut AVBitStreamFilter) ->
     *mut AVBitStreamFilter;
    pub fn av_fast_padded_malloc(ptr: *mut ::libc::c_void,
                                 size: *mut ::libc::c_uint, min_size: size_t);
    pub fn av_fast_padded_mallocz(ptr: *mut ::libc::c_void,
                                  size: *mut ::libc::c_uint,
                                  min_size: size_t);
    pub fn av_xiphlacing(s: *mut ::libc::c_uchar, v: ::libc::c_uint) ->
     ::libc::c_uint;
    pub fn av_log_missing_feature(avc: *mut ::libc::c_void,
                                  feature: *const ::libc::c_char,
                                  want_sample: ::libc::c_int);
    pub fn av_log_ask_for_sample(avc: *mut ::libc::c_void,
                                 msg: *const ::libc::c_char, ...);
    pub fn av_register_hwaccel(hwaccel: *mut AVHWAccel);
    pub fn av_hwaccel_next(hwaccel: *mut AVHWAccel) -> *mut AVHWAccel;
    pub fn av_lockmgr_register(cb:
                                   ::std::option::Option<extern "C" fn
                                                             (arg1:
                                                                  *mut *mut ::libc::c_void,
                                                              arg2:
                                                                  Enum_AVLockOp)
                                                             ->
                                                                 ::libc::c_int>)
     -> ::libc::c_int;
    pub fn avcodec_get_type(codec_id: Enum_AVCodecID) -> avutil::Enum_AVMediaType;
    pub fn avcodec_get_name(id: Enum_AVCodecID) -> *const ::libc::c_char;
    pub fn avcodec_is_open(s: *mut AVCodecContext) -> ::libc::c_int;
    pub fn av_codec_is_encoder(codec: *const AVCodec) -> ::libc::c_int;
    pub fn av_codec_is_decoder(codec: *const AVCodec) -> ::libc::c_int;
    pub fn avcodec_descriptor_get(id: Enum_AVCodecID) ->
     *const AVCodecDescriptor;
    pub fn avcodec_descriptor_next(prev: *const AVCodecDescriptor) ->
     *const AVCodecDescriptor;
    pub fn avcodec_descriptor_get_by_name(name: *const ::libc::c_char) ->
     *const AVCodecDescriptor;
}

pub fn version() -> uint {
    unsafe {
        avcodec_version() as uint
    }
}
pub fn license() -> String {
    unsafe {
        std::string::raw::from_buf(avcodec_license() as *const u8)
    }
}
