#![crate_name = "swresample0"]
#![license = "MIT"]
#![crate_type = "dylib"]
#![allow(non_camel_case_types)]
/* automatically generated by rust-bindgen */
extern crate libc;
extern crate "avutil52" as avutil;
use libc::{uint8_t,int64_t};

pub type __int128_t = ::libc::c_void;
pub type __uint128_t = ::libc::c_void;
pub type __builtin_va_list = [__va_list_tag, ..1u];
pub type Enum_SwrDitherType = ::libc::c_uint;
pub static SWR_DITHER_NONE: ::libc::c_uint = 0;
pub static SWR_DITHER_RECTANGULAR: ::libc::c_uint = 1;
pub static SWR_DITHER_TRIANGULAR: ::libc::c_uint = 2;
pub static SWR_DITHER_TRIANGULAR_HIGHPASS: ::libc::c_uint = 3;
pub static SWR_DITHER_NS: ::libc::c_uint = 64;
pub static SWR_DITHER_NS_LIPSHITZ: ::libc::c_uint = 65;
pub static SWR_DITHER_NS_F_WEIGHTED: ::libc::c_uint = 66;
pub static SWR_DITHER_NS_MODIFIED_E_WEIGHTED: ::libc::c_uint = 67;
pub static SWR_DITHER_NS_IMPROVED_E_WEIGHTED: ::libc::c_uint = 68;
pub static SWR_DITHER_NS_SHIBATA: ::libc::c_uint = 69;
pub static SWR_DITHER_NS_LOW_SHIBATA: ::libc::c_uint = 70;
pub static SWR_DITHER_NS_HIGH_SHIBATA: ::libc::c_uint = 71;
pub static SWR_DITHER_NB: ::libc::c_uint = 72;
pub type Enum_SwrEngine = ::libc::c_uint;
pub static SWR_ENGINE_SWR: ::libc::c_uint = 0;
pub static SWR_ENGINE_SOXR: ::libc::c_uint = 1;
pub static SWR_ENGINE_NB: ::libc::c_uint = 2;
pub type Enum_SwrFilterType = ::libc::c_uint;
pub static SWR_FILTER_TYPE_CUBIC: ::libc::c_uint = 0;
pub static SWR_FILTER_TYPE_BLACKMAN_NUTTALL: ::libc::c_uint = 1;
pub static SWR_FILTER_TYPE_KAISER: ::libc::c_uint = 2;
pub enum Struct_SwrContext { }
pub type SwrContext = Struct_SwrContext;
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
#[link(name = "swresample")]
extern "C" {
    pub fn swr_get_class() -> *const avutil::AVClass;
    pub fn swr_alloc() -> *mut Struct_SwrContext;
    pub fn swr_init(s: *mut Struct_SwrContext) -> ::libc::c_int;
    pub fn swr_is_initialized(s: *mut Struct_SwrContext) -> ::libc::c_int;
    pub fn swr_alloc_set_opts(s: *mut Struct_SwrContext,
                              out_ch_layout: int64_t,
                              out_sample_fmt: avutil::Enum_AVSampleFormat,
                              out_sample_rate: ::libc::c_int,
                              in_ch_layout: int64_t,
                              in_sample_fmt: avutil::Enum_AVSampleFormat,
                              in_sample_rate: ::libc::c_int,
                              log_offset: ::libc::c_int,
                              log_ctx: *mut ::libc::c_void) ->
     *mut Struct_SwrContext;
    pub fn swr_free(s: *mut *mut Struct_SwrContext);
    pub fn swr_convert(s: *mut Struct_SwrContext, out: *mut *mut uint8_t,
                       out_count: ::libc::c_int, _in: *mut *const uint8_t,
                       in_count: ::libc::c_int) -> ::libc::c_int;
    pub fn swr_next_pts(s: *mut Struct_SwrContext, pts: int64_t) -> int64_t;
    pub fn swr_set_compensation(s: *mut Struct_SwrContext,
                                sample_delta: ::libc::c_int,
                                compensation_distance: ::libc::c_int) ->
     ::libc::c_int;
    pub fn swr_set_channel_mapping(s: *mut Struct_SwrContext,
                                   channel_map: *const ::libc::c_int) ->
     ::libc::c_int;
    pub fn swr_set_matrix(s: *mut Struct_SwrContext,
                          matrix: *const ::libc::c_double,
                          stride: ::libc::c_int) -> ::libc::c_int;
    pub fn swr_drop_output(s: *mut Struct_SwrContext, count: ::libc::c_int) ->
     ::libc::c_int;
    pub fn swr_inject_silence(s: *mut Struct_SwrContext, count: ::libc::c_int)
     -> ::libc::c_int;
    pub fn swr_get_delay(s: *mut Struct_SwrContext, base: int64_t) -> int64_t;
    pub fn swresample_version() -> ::libc::c_uint;
    pub fn swresample_configuration() -> *const ::libc::c_char;
    pub fn swresample_license() -> *const ::libc::c_char;
}

pub fn version() -> uint{
    unsafe {
        swresample_version() as uint
    }
}
pub fn license() -> String {
    unsafe {
        std::str::raw::from_c_str(swresample_license())
    }
}
