#![crate_name = "swscale2"]
#![license = "MIT"]
#![crate_type = "dylib"]
#![allow(non_camel_case_types)]
/* automatically generated by rust-bindgen */
extern crate libc;
extern crate avutil = "avutil52";
use libc::{uint8_t,c_float};

pub type __int128_t = ::libc::c_void;
pub type __uint128_t = ::libc::c_void;
pub type __builtin_va_list = [__va_list_tag, ..1u];
#[repr(C)]
pub struct Struct_SwsVector {
    pub coeff: *mut ::libc::c_double,
    pub length: ::libc::c_int,
}
pub type SwsVector = Struct_SwsVector;
#[repr(C)]
pub struct Struct_SwsFilter {
    pub lumH: *mut SwsVector,
    pub lumV: *mut SwsVector,
    pub chrH: *mut SwsVector,
    pub chrV: *mut SwsVector,
}
pub type SwsFilter = Struct_SwsFilter;
pub enum Struct_SwsContext { }
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
pub static SWS_FAST_BILINEAR: int = 1;
pub static SWS_BILINEAR: int = 2;
pub static SWS_BICUBIC: int = 4;
pub static SWS_X: int = 8;
pub static SWS_POINT: int = 0x10;
pub static SWS_AREA: int = 0x20;
pub static SWS_BICUBLIN: int = 0x40;
pub static SWS_GAUSS: int = 0x80;
pub static SWS_SINC: int = 0x100;
pub static SWS_LANCZOS: int = 0x200;
pub static SWS_SPLINE: int = 0x400;
pub static SWS_SRC_V_CHR_DROP_MASK: int = 0x30000;
pub static SWS_SRC_V_CHR_DROP_SHIFT: int = 16;
pub static SWS_PARAM_DEFAULT: int = 123456;
pub static SWS_PRINT_INFO: int = 0x1000;
pub static SWS_FULL_CHR_H_INT: int = 0x2000;
pub static SWS_FULL_CHR_H_INP: int = 0x4000;
pub static SWS_DIRECT_BGR: int = 0x8000;
pub static SWS_ACCURATE_RND: int = 0x40000;
pub static SWS_BITEXACT: int = 0x80000;
pub static SWS_MAX_REDUCE_CUTOFF: c_float = 0.002;
pub static SWS_CS_ITU709: int = 1;
pub static SWS_CS_FCC: int = 4;
pub static SWS_CS_ITU601: int = 5;
pub static SWS_CS_ITU624: int = 5;
pub static SWS_CS_SMPTE170M: int = 5;
pub static SWS_CS_SMPTE240M: int = 7;
pub static SWS_CS_DEFAULT: int = 5;
#[link(name = "swscale")]
extern "C" {
    pub fn swscale_version() -> ::libc::c_uint;
    pub fn swscale_configuration() -> *const ::libc::c_char;
    pub fn swscale_license() -> *const ::libc::c_char;
    pub fn sws_getCoefficients(colorspace: ::libc::c_int) ->
     *const ::libc::c_int;
    pub fn sws_isSupportedInput(pix_fmt: avutil::Enum_AVPixelFormat) -> ::libc::c_int;
    pub fn sws_isSupportedOutput(pix_fmt: avutil::Enum_AVPixelFormat) ->
     ::libc::c_int;
    pub fn sws_isSupportedEndiannessConversion(pix_fmt: avutil::Enum_AVPixelFormat) ->
     ::libc::c_int;
    pub fn sws_alloc_context() -> *mut Struct_SwsContext;
    pub fn sws_init_context(sws_context: *mut Struct_SwsContext,
                            srcFilter: *mut SwsFilter,
                            dstFilter: *mut SwsFilter) -> ::libc::c_int;
    pub fn sws_freeContext(swsContext: *mut Struct_SwsContext);
    pub fn sws_getContext(srcW: ::libc::c_int, srcH: ::libc::c_int,
                          srcFormat: avutil::Enum_AVPixelFormat, dstW: ::libc::c_int,
                          dstH: ::libc::c_int, dstFormat: avutil::Enum_AVPixelFormat,
                          flags: ::libc::c_int, srcFilter: *mut SwsFilter,
                          dstFilter: *mut SwsFilter,
                          param: *const ::libc::c_double) ->
     *mut Struct_SwsContext;
    pub fn sws_scale(c: *mut Struct_SwsContext,
                     srcSlice: *const *const uint8_t,
                     srcStride: *const ::libc::c_int,
                     srcSliceY: ::libc::c_int, srcSliceH: ::libc::c_int,
                     dst: *const *mut uint8_t,
                     dstStride: *const ::libc::c_int) -> ::libc::c_int;
    pub fn sws_setColorspaceDetails(c: *mut Struct_SwsContext,
                                    inv_table: [::libc::c_int, ..4u],
                                    srcRange: ::libc::c_int,
                                    table: [::libc::c_int, ..4u],
                                    dstRange: ::libc::c_int,
                                    brightness: ::libc::c_int,
                                    contrast: ::libc::c_int,
                                    saturation: ::libc::c_int) ->
     ::libc::c_int;
    pub fn sws_getColorspaceDetails(c: *mut Struct_SwsContext,
                                    inv_table: *mut *mut ::libc::c_int,
                                    srcRange: *mut ::libc::c_int,
                                    table: *mut *mut ::libc::c_int,
                                    dstRange: *mut ::libc::c_int,
                                    brightness: *mut ::libc::c_int,
                                    contrast: *mut ::libc::c_int,
                                    saturation: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn sws_allocVec(length: ::libc::c_int) -> *mut SwsVector;
    pub fn sws_getGaussianVec(variance: ::libc::c_double,
                              quality: ::libc::c_double) -> *mut SwsVector;
    pub fn sws_getConstVec(c: ::libc::c_double, length: ::libc::c_int) ->
     *mut SwsVector;
    pub fn sws_getIdentityVec() -> *mut SwsVector;
    pub fn sws_scaleVec(a: *mut SwsVector, scalar: ::libc::c_double);
    pub fn sws_normalizeVec(a: *mut SwsVector, height: ::libc::c_double);
    pub fn sws_convVec(a: *mut SwsVector, b: *mut SwsVector);
    pub fn sws_addVec(a: *mut SwsVector, b: *mut SwsVector);
    pub fn sws_subVec(a: *mut SwsVector, b: *mut SwsVector);
    pub fn sws_shiftVec(a: *mut SwsVector, shift: ::libc::c_int);
    pub fn sws_cloneVec(a: *mut SwsVector) -> *mut SwsVector;
    pub fn sws_printVec2(a: *mut SwsVector, log_ctx: *mut avutil::AVClass,
                         log_level: ::libc::c_int);
    pub fn sws_freeVec(a: *mut SwsVector);
    pub fn sws_getDefaultFilter(lumaGBlur: ::libc::c_float,
                                chromaGBlur: ::libc::c_float,
                                lumaSharpen: ::libc::c_float,
                                chromaSharpen: ::libc::c_float,
                                chromaHShift: ::libc::c_float,
                                chromaVShift: ::libc::c_float,
                                verbose: ::libc::c_int) -> *mut SwsFilter;
    pub fn sws_freeFilter(filter: *mut SwsFilter);
    pub fn sws_getCachedContext(context: *mut Struct_SwsContext,
                                srcW: ::libc::c_int, srcH: ::libc::c_int,
                                srcFormat: avutil::Enum_AVPixelFormat,
                                dstW: ::libc::c_int, dstH: ::libc::c_int,
                                dstFormat: avutil::Enum_AVPixelFormat,
                                flags: ::libc::c_int,
                                srcFilter: *mut SwsFilter,
                                dstFilter: *mut SwsFilter,
                                param: *const ::libc::c_double) ->
     *mut Struct_SwsContext;
    pub fn sws_convertPalette8ToPacked32(src: *const uint8_t,
                                         dst: *mut uint8_t,
                                         num_pixels: ::libc::c_int,
                                         palette: *const uint8_t);
    pub fn sws_convertPalette8ToPacked24(src: *const uint8_t,
                                         dst: *mut uint8_t,
                                         num_pixels: ::libc::c_int,
                                         palette: *const uint8_t);
    pub fn sws_get_class() -> *const avutil::AVClass;
}

pub fn version() -> uint{
    unsafe {
        swscale_version() as uint
    }
}
pub fn license() -> String {
    unsafe {
        std::str::raw::from_c_str(swscale_license())
    }
}
